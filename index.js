const TelegramApi = require('node-telegram-bot-api');
const token = '6076442091:AAGUxzIT8C7G7_hx4clixZpIi0Adtb2p2MA';
const bot = new TelegramApi(token, {
    polling: {
        interval: 300, //–º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ —Å –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä —Ç–≥ "–º–ª—Å–µ–∫"
        autoStart: true, //–æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–æ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã
        params: {
            timeout:10 //—Ç–∞–π–º–∞—É—Ç –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ "–º–ª—Å–µ–∫"
        }
    }
});

//–∏–º–ø–æ—Ä—Ç—ã
const {gameOptions, againOptions, resetOptions, workOptions, work1Options, VCOptions, brandOptions, startFindOptions, startWorkOptions, mainMenuOptions} = require('./options');
const sequelize = require('./db');
const UserModel = require('./models');

//–≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
chats = {};
lc = {};    //–ø–æ—Å–ª–µ–¥–Ω—è—è –∫–æ–º–∞–Ω–¥–∞
plc = {};   //–ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω—è—è –∫–æ–º–∞–Ω–¥–∞

//–º–µ–Ω—é –∫–æ–º–∞–Ω–¥
bot.setMyCommands([
    {command: '/start', description:'–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'},
    {command: '/startwork', description:'–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã'},
    {command: '/infowork', description:'–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤'},
    //{command: '/infogame', description:'–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∏–≥—Ä–µ'},
    //{command: '/game', description:'–ò–≥—Ä–∞ –≤ —É–≥–∞–¥–∞–π–∫—É'},
])


//—Ñ—É–Ω–∫—Ü–∏–∏=========================================================================================

const startGame = async (chatId) => {
    const randomNumber = Math.floor(Math.random() * 10)
    chats[chatId] = randomNumber;
    await bot.sendMessage(chatId, `–û—Ç–≥–∞–¥—ã–≤–∞–π:`, gameOptions)
}

const editEmail = async (chatId) => {
    lc = '/editEmail'
    return bot.sendMessage(chatId, `–ú–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –í–∞—à —Ä–∞–±–æ—á–∏–π e-mail:`)
}

const editNickname = async (chatId) => {
    lc = '/editNickname'
    return bot.sendMessage(chatId, `–ú–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –í–∞—à —Ä–∞–±–æ—á–∏–π e-mail:`)
}

//=============================================================================================================

const start = async () => {
    console.log('–ë–æ—Ç –∑–∞–ø—â—É–µ–Ω...')

    try {
        await sequelize.authenticate();
        await sequelize.sync();
        await console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ');
    } catch(err) {
        console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å–ª–æ–º–∞–ª–æ—Å—å', err);
    }

//—Å–ª—É—à–∞—Ç–µ–ª—å –∫–æ–º–∞–Ω–¥======================================================================================
    bot.onText(/\/game/, async msg => {
        const chatId = msg.chat.id;
        const text = msg.text;

        lc = text;
        await bot.sendMessage(chatId, `–°–µ–π—á–∞—Å –∑–∞–≥–∞–¥–∞—é —Ü–∏—Ñ—Ä—É`)
        const randomNumber = Math.floor(Math.random() * 10)
        chats[chatId] = randomNumber;
        await bot.sendMessage(chatId, `–û—Ç–≥–∞–¥—ã–≤–∞–π:`, gameOptions)
    })

//—Å–ª—É—à–∞—Ç–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏–π==========================================================================================
bot.on('message', async msg => {
    const text = msg.text;
    const chatId = msg.chat.id;
    console.log(msg)

    const user = await UserModel.findOne({
        where: {
            chatId: chatId
        }
    });

    //—Å—Ç–∞—Ä—Ç
        if (text === '/start') {

            try {
                let user = await UserModel.findOne({
                    where: {
                        chatId: chatId
                    }
                });

                //–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                if (user) {
                    lc = null;
                    return bot.sendMessage(chatId, `–ò —Å–Ω–æ–≤–∞ –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π, ${user.nickname}! \n\n–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É: /startwork,\n–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: /infowork,\n–ò–∑–º–µ–Ω–∏—Ç—å e-mail: /editEmail,\n–ò–∑–º–µ–Ω–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ /editNickname`)
                }

                if (!user) {
                    user = await UserModel.create({chatId});
                    console.log(`–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: ${msg.from.first_name} ${msg.from.last_name}`);

                    await user.update({
                        firstName: msg.from.first_name, 
                        lastName: msg.from.last_name, 
                    });
                    lc = '/editNickname';
                    return bot.sendMessage(chatId, `–ü—Ä–∏–≤–µ—Ç, ${msg.from.first_name} '–ú–µ–Ω—è –∑–æ–≤—É—Ç –±–æ—Ç –ó–∞–∫.\n–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!\n–Ø –º–æ–≥—É –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É –û–ü–£–°, –∞ —Ç–∞–∫–∂–µ —É–∑–Ω–∞—Ç—å —Å—Ä–æ–∫–∏ –ø–æ—Å—Ç–∞–≤–∫–∏ –∏ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ.\n–ö–∞–∫ —è –º–æ–≥—É –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?`);
                }

            } catch (e) {
            console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', e);
            }

        }

        //–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            if (text === '/startwork') {

                if (!user.email) {
                    await bot.sendMessage(chatId, '–î–ª—è –Ω–∞—á–∞–ª–∞ —Å–æ–æ–±—â–∏—Ç–µ –º–Ω–µ –í–∞—à —Ä–∞–±–æ—á–∏–π e-mail, —ç—Ç–æ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞–º –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º')
                    return editEmail(chatId);
                } else {
                    return bot.sendMessage(chatId, '–ò —Ç–∞–∫, —Å —á–µ–≥–æ –Ω–∞—á–Ω–µ–º?', workOptions)
                } 
            }

            //–∏–∑–º–µ–Ω–∏—Ç—å e-mail
            if (text === '/editEmail') {
                return editEmail(chatId);
            }

            //–ó–∞–ø–∏—Å—ã–≤–∞–µ–º e-mail –≤ —è—á–µ–π–∫—É –ë–î
            if (lc === '/editEmail') {
                await user.update({email: text});
                return bot.sendMessage(chatId, `–í–∞—à e-mail "<b>${user.email}</b>" —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω\n<pre>(–¥–ª—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏ –≤–≤–µ–¥–∏—Ç–µ e-mail –ø–æ–≤—Ç–æ—Ä–Ω–æ)</pre>`, startWorkOptions)
            }            

            //–∏–∑–º–µ–Ω–∏—Ç—å Nickname
            if (text === '/editNickname') {
                return editNickname(chatId);
            }
            
            //–ó–∞–ø–∏—Å—ã–≤–∞–µ–º Nickname –≤ —è—á–µ–π–∫—É –ë–î
            if (lc === '/editNickname') {
                await user.update({nickname: text});
                return bot.sendMessage(chatId, `–•–æ—Ä–æ—à–æ, "<b>${user.nickname}</b>", —è –∑–∞–ø–æ–º–Ω–∏–ª.\n<pre>(–¥–ª—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏ –≤–≤–µ–¥–∏—Ç–µ e-mail –ø–æ–≤—Ç–æ—Ä–Ω–æ)</pre>`, mainMenuOptions)
            }

            //–ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞ –≤ —è—á–µ–π–∫—É –ë–î
            if (lc === '/enterBrand') {
                await user.update({brand: text});
                return bot.sendMessage(chatId, `–ù–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞ "<b>${text}</b>" —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ\n<pre>(–¥–ª—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏ –≤–≤–µ–¥–∏—Ç–µ –±—Ä–µ–Ω–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ)</pre>`, VCOptions);
            }
            
            //–ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∞—Ä—Ç–∏–∫—É–ª –≤ —è—á–µ–π–∫—É –ë–î
            if (lc === '/enterVC') {
                await user.update({vendorCode: text});
                return bot.sendMessage(chatId, `–ê—Ä—Ç–∏–∫—É–ª "<b>${text}</b>" —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω\n<pre>(–¥–ª—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏ –≤–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –ø–æ–≤—Ç–æ—Ä–Ω–æ)</pre>`, startFindOptions);
            }
            
            //–≤—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            if (text === '/infowork') {
                return bot.sendMessage(chatId, `–í—ã –∏—â–∏—Ç–µ: \n\n${user.typeFind}\n–ë—Ä–µ–Ω–¥: ${user.brand}\n–ê—Ä—Ç–∏–∫—É–ª: ${user.vendorCode}\n\n–í–∞—à email: ${user.email}`);
            }

            if (text === 'recreatetable' && chatId === '356339062') {
                await User.sync({ force: true })
                return bot.sendMessage(chatId, '–¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –º–æ–¥–µ–ª–∏ `User` —Ç–æ–ª—å–∫–æ —á—Ç–æ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞ –∑–∞–Ω–æ–≤–æ!')
            }


            if (text.toLowerCase() === '–ø—Ä–∏–≤–µ—Ç' + '') {
                return bot.sendSticker(chatId, 'https://cdn.tlgrm.app/stickers/087/0cf/0870cf0d-ec03-41e5-b239-0eb164dca72e/192/1.webp')
            }

            if (text === '/infogame') {
                const chatId = msg.chat.id;
                const text = msg.text;
    
                lc = text;
                return bot.sendMessage(chatId, `–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: "${user.right}"\n–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: "${user.wrong}"`, resetOptions)
            }   

            if (text !== '/game') {
                await bot.sendSticker(chatId, 'https://tlgrm.ru/_/stickers/ccd/a8d/ccda8d5d-d492-4393-8bb7-e33f77c24907/12.webp')
                return bot.sendMessage(chatId, '–ù–µ –ø–æ–Ω–∏–º–∞—é —Ç–µ–±—è..')
            }


    })

//—Å–ª—É—à–∞—Ç–µ–ª—å –∫–æ–ª–±—ç–∫–æ–≤==========================================================================================================================================

    bot.on('callback_query', async msg => {
        const data = msg.data;
        const chatId = msg.message.chat.id;
        const sorry = '–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –µ—â—ë –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üòÖ';
        console.log(msg)

        const user = await UserModel.findOne({
            where: {
                chatId: chatId
            }
        });

        try {

        //–Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã
        if(data === '/startwork') {
            lc = null;
            return bot.sendMessage(chatId, '–ò —Ç–∞–∫, —Å —á–µ–≥–æ –Ω–∞—á–Ω–µ–º?', workOptions)
        }
        
        //–Ω–∞–ª–∏—á–∏–µ, —Å—Ä–æ–∫–∏, —Ä–µ–∑–µ—Ä–≤
        if(data === '/work1') {
            lc = data;
            return bot.sendMessage(chatId, '–•–æ—Ä–æ—à–æ, —á—Ç–æ –º—ã –∏—â–µ–º?', work1Options);
        }

        //–∑–∞–ø–∏—Å—å typeFind
        if(data === '–¢–µ–∫—Å—Ç–∏–ª—å') {
            await user.update ({
                typeFind: data,
            });
            return bot.sendMessage(chatId, `${data}, —Ç–∞–∫ –∏ –∑–∞–ø–∏—à–µ–º..`, brandOptions);
        }

        //–∑–∞–ø–∏—Å—å typeFind
        if(data === '–û–±–æ–∏') {
            await user.update ({
                typeFind: data,
            });
            return bot.sendMessage(chatId, `${data}, —Ç–∞–∫ –∏ –∑–∞–ø–∏—à–µ–º..`, brandOptions);
        }

        //–í–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞
        if(data === '/enterBrand') {
            lc = data;
            return bot.sendMessage(chatId, `–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞:`);
        }

        //–≤–≤–æ–¥–∏–º –∞—Ä—Ç–∏–∫—É–ª
        if(data === '/enterVC') {
            lc = data;
            return bot.sendMessage(chatId, `–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª:`);
        }
        
        //–ø–æ–∏—Å–∫ –ø–æ –≤–≤–µ–¥–µ–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º: brand, vendorCode, typeFind
        if(data === '/startFind') {
            lc = null;
            return bot.sendMessage(chatId, sorry);
        }

        //–ø—Ä–µ–≤—å—é —Ñ–æ—Ç–æ
        if(data === '/work2') {
            lc = null;
            return bot.sendMessage(chatId, sorry);
        }

        //–¥–æ–±–∞–≤–∏—Ç—å –≤ –∑–∞–∫–∞–∑
        if(data === '/work3') {
            lc = null;
            return bot.sendMessage(chatId, sorry);
        }


        //—Ä–µ—Å—Ç–∞—Ä—Ç –∏–≥—Ä—ã
        if (data === '/again') {
            lc = data;
            bot.deleteMessage(chatId, {lmId0, lmId1, lmId2});
            return startGame(chatId);
        }

        //—Ä–µ—Å—Ç–∞—Ä—Ç –∏–≥—Ä—ã
        if (data === '/infogame') {
            lc = null;
            return bot.sendMessage(chatId, `–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: "${user.right}"\n–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: "${user.wrong}"`, resetOptions) 
        }

        //—Å–±—Ä–æ—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–≥—Ä—ã
        if(data === '/reset') {

            if (user) {
                await user.update ({
                    right: 0,
                    wrong: 0,
                });

            } else {
                await UserModel.create({chatId, right: 0, wrong: 0});
            }
            return bot.sendMessage(chatId, `–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–≥—Ä—ã —Å–±—Ä–æ—à–µ–Ω–Ω—ã:\n–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö ${user.right},\n–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö ${user.wrong}`, againOptions)
        }

        //–∑–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–≥—Ä—ã –≤ –ë–î
        if (lc === '/game' || '/again') {

            if (data == chats[chatId]) {
                user.right += 1;
                await user.save();
                return bot.sendMessage(chatId, `–¢—ã –æ—Ç–≥–∞–¥–∞–ª —Ü–∏—Ñ—Ä—É "${chats[chatId]}"`, againOptions);
            } else {
                user.wrong += 1;
                await user.save();
                return bot.sendMessage(chatId, `–ù–µ—Ç, —è –∑–∞–≥–∞–¥–∞–ª —Ü–∏—Ñ—Ä—É "${chats[chatId]}"`, againOptions);return
            }
        }

        } catch (err) {
            return bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –≤ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–¥–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞—Ç–µ–ª—è –∫–æ–ª–±—ç–∫–æ–≤', e);
        }

    })

}

start()

    
