const TelegramApi = require('node-telegram-bot-api');
const axios = require('axios');
const { SocksProxyAgent } = require('socks-proxy-agent');
const cheerio = require('cheerio');
const XLSX = require('xlsx');
const { JSDOM } = require('jsdom');
const ExcelJS = require('exceljs');
const path = require('path');
const fs = require('fs');
const util = require('util');

const readFile = util.promisify(fs.readFile);
const XlsxPopulate = require('xlsx-populate');
const tough = require('tough-cookie');  //
const { axiosCookieJarSupport } = require('axios-cookiejar-support');   //

//–ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï
chats = {};
             
botMsgIdx = {};    //–∞–π–¥–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞
sorry = '–ò–∑–≤–∏–Ω–∏—Ç–µ, —è —ç—Ç–æ–º—É –ø–æ–∫–∞ –µ—â—ë —É—á—É—Å—åüòÖ\n–ü—Ä–æ—à—É –≤–∞—Å, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å —Å –¥–∞–Ω–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º –∫\npurchasing_internal@manders.ru';

//–ò–ú–ü–û–†–¢–´
// –∏–º–ø–æ—Ä—Ç –∫–Ω–æ–ø–æ–∫
const {
    mainMenuOptions, 
    gameOptions, 
    againOptions, 
    resetOptions, 
    resetInfoWorkOptions,
    workOptions, 
    work1Options, 
    checkVendorOptions, 
    startFindOptions, 
    startFind1Options, 
    startFind2Options, 
    beginWorkOptions, 
    beginWork2Options, 
    mainMenuReturnOptions, 
    settingsOptions, 
    enterReserveNumberOptions, 
    sendReserveOptions, 
    beginWork3Options 
} = require('./options');

// –ò–ú–ü–û–†–¢–´
const sequelize = require('./db');
const UserModel = require('./models');
const { transporter, nodemailer } = require('./nodemailer');

// ======================================================================================================================================
// —Ñ—É–Ω–∫—Ü–∏–∏ ==============================================================================================================================
// ======================================================================================================================================
// —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
// ======================================================================================================================================

const createNewUser = async (chatId, msg) => {
    
    const newUser = await UserModel.create({chatId});
    console.log(`–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: ${msg.from.first_name} ${msg.from.last_name}`);

    const user = await UserModel.findOne({
        where: {
            chatId: chatId
        },
        attributes: [
            'id', 
            'chatId', 
            'lastCommand', 
            'firstName', 
            'lastName', 
            'email', 
            'nickname'
        ]
    });

    return user.update({
        firstName: msg.from.first_name, 
        nickname: msg.from.first_name,
        lastName: msg.from.last_name, 
        email: '/passwordcheck',
    });
}

// ======================================================================================================================================
// —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è
// ======================================================================================================================================

const chekPassword = async (chatId, msg) => {
    let text = msg.text;

    const user = await UserModel.findOne({
        where: {
            chatId: chatId
        }, 
        attributes: ['id', 'chatId', 'lastCommand', 'email']
    });

    if (text === bot_password) {

        // lc = '/editNickname';
        await user.update({lastCommand: '/editEmail', email: '/editEmail'}, {
            where: {
                chatId: chatId,
            }
        })

        return bot.sendMessage(
            chatId, 
            `–ü—Ä–∏–≤–µ—Çc—Ç–≤—É—é, ${msg.from.first_name}! –ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!\n<b>–ù–∞–ø–∏—à–∏—Ç–µ –í–∞—à —Ä–∞–±–æ—á–∏–π email</b>?`,
            { parse_mode: 'HTML' }
        );

    } else {

        return bot.sendMessage(
            chatId, 
            `–í –¥–æ—Å—Ç—É–ø–µ –æ—Ç–∫–∞–∑–∞–Ω–æ.\n–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:`
        );
    }
}

// ======================================================================================================================================
// —Ñ—É–Ω–∫—Ü–∏—è –≤–≤–æ–¥–∞ email
// ======================================================================================================================================

const editEmail = async (chatId) => {

    const user = await UserModel.findOne({
        where: {
            chatId: chatId
        },
        attributes: ['id', 'chatId', 'lastCommand']
    });
    
    // lc = /editEmail
    await user.update({lastCommand: '/editEmail'}, {
        where: {
            chatId: chatId
        }
    })
    return bot.sendMessage(chatId,
        `<b>–ù–∞–ø–∏—à–∏—Ç–µ –í–∞—à —Ä–∞–±–æ—á–∏–π email</b>`,
        { parse_mode: 'HTML' }
    );
}

// ======================================================================================================================================
// —Ñ—É–Ω–∫—Ü–∏—è –≤–≤–æ–¥–∞ –Ω–∏–∫–Ω–µ–π–º–∞
// ======================================================================================================================================

const editNickname = async (chatId) => {

    const user = await UserModel.findOne({
        where: {
            chatId: chatId
        },
        attributes: [
            'id', 
            'chatId', 
            'lastCommand'
        ]
    });
    
    // lc = '/editNickname'
    await user.update({
        lastCommand: '/editNickname'
    }, {
        where: {
            chatId: chatId
        }
    });

    return bot.sendMessage(
        chatId, 
        `–í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –í–∞—à –Ω–∏–∫–Ω–µ–π–º\n<i>—Ç–æ –∫–∞–∫ —è –±—É–¥—É –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è</i>:`,
        { parse_mode: 'HTML' }
    );
}

// ======================================================================================================================================
// —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –≤ 1C
// ======================================================================================================================================

const startRequest1C = async (chatId, vendorCode) => {

    try {
// PLGUM5&submit=–ü–æ–ª—É—á–∏—Ç—å
        const searchUrl1C = `${url_manders_1C}=${vendorCode}&submit=–ü–æ–ª—É—á–∏—Ç—å`;
        const response = await axios.get(searchUrl1C,  { timeout: 5000 });

        if (!response) {

            // let messageResult1C = `–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ 1–° –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ\n<i>—ç—Ç–æ –Ω–æ—Ä–º–∞ –≤–æ –≤–Ω–µ—Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è –º–∞–≥–∞–∑–∏–Ω–æ–≤</i>`
            // return { messageResult1C };

        } else {

            // –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ DOM
            const dom = new JSDOM(response.data);
            const document = dom.window.document;
    
            // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏–∑ DOM
            const tableElement = document.querySelector("body > table:nth-child(3)");
    
            // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
            const rows = tableElement.querySelectorAll('tr');
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ
    
            if (rows.length > 0) {
                let warehouse, quantity, reserve;
    
                // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç—Ä–æ—á–Ω–æ
                const formatedData = Array.from(rows).map((row, index) => {
                    
                    if (!row.querySelector('td.R3C0')) {
                        const cells = row.querySelectorAll('td');
                        if (cells[0]) {
                            warehouse = cells[0].textContent.trim();  // —Å–∫–ª–∞–¥
                        }
                        if (cells[1] !== '') {
                            quantity = cells[1].textContent.trim().split( "," )[0];   // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                        } else {
                            quantity = '0';
                        }
                        if (cells[2] !== '') {
                            reserve = cells[2].textContent.trim().split( "," )[0];     // —Ä–µ–∑–µ—Ä–≤
                        } else {
                            reserve = '0';
                        }
                    }
                    return {
                        warehouse,
                        quantity,
                        reserve
                    };
                    
                });
    
                // –í—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                if (formatedData.length > 0 ) {
    
                    if (botMsgIdx !== null) {
                        bot.deleteMessage(chatId, botMsgIdx);
                        botMsgIdx = null;
                    }
                    let message = '';
                    let messageResult1C = formatedData.map(obj => {
                        if (obj.warehouse === undefined) {
                            return "";
                        } else {
                            message = '';
                            message += `<strong>${obj.warehouse}</strong>\n`
                            const balance = obj.quantity-obj.reserve;

                            if (balance) {
                                message += `–°–≤–æ–±–æ–¥–Ω–æ: ${balance}\n`
                            }
                            if (obj.reserve > 0) {
                                message += `–†–µ–∑–µ—Ä–≤: ${obj.reserve}\n`
                            }
                            if (obj.quantity > 0) {
                                message += `–û–±—â–∏–π: ${obj.quantity}\n`
                            }
                            message += `\n`
                            return message;
                        }
                    }).join('');
    
                    if (messageResult1C.length !== 0) {
    
                        return { messageResult1C };
    
                    } else {
    
                        messageResult1C = `${vendorCode} –ø–æ –¥–∞–Ω–Ω—ã–º 1C –Ω–µ —á–∏—Å–ª–∏—Ç—Å—è\n\n` // –ø—Ä–∏–≤—è–∑–∫–∞ –∫ !findResult1C.toLowerCase().includes('–Ω–µ —á–∏—Å–ª–∏—Ç—Å—è') 
                        return { messageResult1C };
                    }
    
                } else {
    
                    console.log('–í —Ç–∞–±–ª–∏—Ü–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö');
                }
            } else {
    
                console.log('–ù–µ –Ω–∞–π–¥–µ–Ω–Ω—ã —Å—Ç—Ä–æ–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ');
            }
        }

    } catch (e) {
        console.log('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–µ–Ω–Ω–∏—è –∫–æ–¥–∞', e);
    }
}

// ======================================================================================================================================
// —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
// ======================================================================================================================================

const startCheckVendor = async (chatId, msg) => {
    // lc = '/enterVC';
    const user = await UserModel.findOne({
        where: {
            chatId: chatId
        },
        attributes: ['id', 'chatId', 'lastCommand', 'brand', 'vendor']
    });

    await user.update({lastCommand: '/enterVC'}, {
        where: {
            chatId: chatId
        }
    })

    if (user.vendor !== null) {

        const formatedUserVendor = user.vendor.replace(/[\s-]/g, '');

        if (formatedUserVendor.includes('–û–ü–£–°')) {
            return bot.sendMessage(
                chatId, 
                `–ß—Ç–æ–±—ã <b>–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Å—Ç–∞—Ç–∫–∏</b> –Ω–∞ —Å–∞–π—Ç–µ\n<code>https://opusdeco.ru</code>\n<b>–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –∏—Å–∫–æ–º–æ–≥–æ –≤–∞–º–∏ –æ–±—ä–µ–∫—Ç–∞:</b>`,
                { parse_mode: 'HTML' }
            );
        } else if (formatedUserVendor.includes('–î–ï–ö–û–†–¢–†–ï–ô–î')) {
            return bot.sendMessage(
                chatId, 
                `–ß—Ç–æ–±—ã <b>–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Å—Ç–∞—Ç–∫–∏</b> –Ω–∞ —Å–∞–π—Ç–µ\n<code>https://dealer.decaro.ru</code>\n<b>–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –∏—Å–∫–æ–º–æ–≥–æ –≤–∞–º–∏ –æ–±—ä–µ–∫—Ç–∞:</b>`,
                { parse_mode: 'HTML' }
            );
        } else if (formatedUserVendor.includes('–õ–ï–í–ê–ù–¢–ò–ù')) {
            return bot.sendMessage(
                chatId, 
                `–ß—Ç–æ–±—ã <b>–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Å—Ç–∞—Ç–∫–∏</b> –Ω–∞ —Å–∞–π—Ç–µ\n<code>http://www.galleriaarben.ru</code>\n<b>–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –∏—Å–∫–æ–º–æ–≥–æ –≤–∞–º–∏ –æ–±—ä–µ–∫—Ç–∞:</b>`,
                { parse_mode: 'HTML' }
            );

        } else if (formatedUserVendor.includes('DESIGNERSGUILD')) {
            return bot.sendMessage(
                chatId, 
                `–ß—Ç–æ–±—ã <b>–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Å—Ç–∞—Ç–∫–∏</b> –Ω–∞ —Å–∞–π—Ç–µ\n<code>https://www.designersguild.com</code>\n<b>–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –∏—Å–∫–æ–º–æ–≥–æ –≤–∞–º–∏ –æ–±—ä–µ–∫—Ç–∞:</b>`,
                { parse_mode: 'HTML' }
            );

        } else if  (formatedUserVendor.includes('–î–ï–ö–û–†–î–ï–õ–Æ–ö–°') ||
                    formatedUserVendor.includes('–û–†–ê–ö') ||
                    formatedUserVendor.includes('–û–†–ê–ö') ||
                    formatedUserVendor.includes('–î–ï–ö–û–†–†–£–°') ||
                    formatedUserVendor.includes('–ë–ê–£–¢–ï–ö–°') ||
                    formatedUserVendor.includes('–õ–û–ô–ú–ò–ù–ê') ||
                    formatedUserVendor.includes('–°–ò–†–ü–ò') ||
                    formatedUserVendor.includes('BRINK&CAMPMAN') ||
                    formatedUserVendor.includes('LITTLEGREENE')
                ) {

            await bot.sendMessage(
                chatId,
                `–í–≤–µ–¥–∏—Ç–µ <b>–∞—Ä—Ç–∏–∫—É–ª</b> –∏–ª–∏ <b>–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ</b> –∏—Å–∫–æ–º–æ–≥–æ –≤–∞–º–∏ –æ–±—ä–µ–∫—Ç–∞:`,
                { parse_mode: 'HTML' }
            );
            botMsgIdx = msg.message_id += 1;
            return;  

        } else {

            await user.update({lastCommand: '/enterBrand'}, {
                where: {
                    chatId: chatId
                }
            })

            return bot.sendMessage(
                chatId, 
                `–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º–Ω–µ –µ—â—ë –Ω–µ —Ä–∞–∑—Ä–µ—à–∏–ª–∏ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–º –±—Ä–µ–Ω–¥–∞ <b>${user.brand}</b>.`,
                { parse_mode: 'HTML' }
            );
        }
    } else {

        await user.update({lastCommand: '/enterBrand'}, {
            where: {
                chatId: chatId
            }
        })

        return bot.sendMessage(
            chatId, `–ë—Ä–µ–Ω–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω‚ùå\n–ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤–∏–µ –±—Ä–µ–Ω–¥–æ–≤ –≤ —ç–∫—Å–µ–ª—å —Ñ–∞–π–ª–∞—Ö:\n<b>"–ö–∞—Ç–∞–ª–æ–≥–∏  —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤ —Å–∞–ª–æ–Ω—ã 26.09.19"</b>\n<b>"–¢–µ–∫—Å—Ç–∏–ª—å –ö–∞—Ç–∞–ª–æ–≥–∏  —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤ —Å–∞–ª–æ–Ω—ã"</b>\nc —ç–∫—Å–µ–ª—å —Ñ–∞–π–ª–æ–º <b>"–°–ø–∏—Å–æ–∫ –ø—Ä–∞–π—Å–ª–∏—Å—Ç–æ–≤"</b>.`,
            { parse_mode: 'HTML' }
        );
    }
        
}

// ======================================================================================================================================
// —Ñ—É–Ω–∫—Ü–∏—è html –∑–∞–ø—Ä–æ—Å–∞ –ø–æ –¥–∞–Ω–Ω—ã–º –∏–∑ –ë–î –Ω–∞ —Å–∞–π—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –û–ü–£–°
// ======================================================================================================================================

const startFindOpus = async (chatId) => {
    // lc = '/enterVC';
    const user = await UserModel.findOne({
        where: {
            chatId: chatId
        },
        attributes: ['id', 'chatId', 'lastCommand', 'brand', 'vendorCode']
    });

    await user.update({lastCommand: '/enterVC'}, {
        where: {
            chatId: chatId
        }
    })

    try {

        //–§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –ø–æ–∏—Å–∫–∞
        const searchUrl = `https://opusdeco.ru/search/?type=catalog&q=${user.brand}+${user.vendorCode}`;
        console.log('—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–∞ —Å—Å—ã–ª–∫–∞');

        //–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–∞–π—Ç
        const response = await axios.get(searchUrl);
        const $ = cheerio.load(response.data);
        console.log('–∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–∞–π—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');

        //–°–æ–∑–¥–∞—ë–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä –∏–∑ –ø–æ–∏—Å–∫–∞ 
        const firstProductLink = $('h3.item__card__title.card-product-general__title.mb-2 a').attr('href');

        if (firstProductLink) {
            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞
            const productResponse = await axios.get(`https://opusdeco.ru${firstProductLink}`);
            const $$ = cheerio.load(productResponse.data);
            console.log('—É—Å–ø–µ—à–Ω–æ –∑–∞—à—ë–ª –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞');
            
            // –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ç–∞–±–ª–∏—Ü—ã
            let availabilityContent = ``;
            // –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ç–∞–±–ª–∏—Ü—ã –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è
            let expectedArrivalContent = ``;

            const modalBody = $$('#stockAvailabilityModal .modal-body');
            // –ù–∞—Ö–æ–¥–∏–º —Ç–∞–±–ª–∏—Ü—É —Å –Ω–∞–ª–∏—á–∏–µ–º —Ç–æ–≤–∞—Ä–∞
            const availabilityTable = modalBody.find('table').eq(0);
            // –ù–∞—Ö–æ–¥–∏–º —Ç–∞–±–ª–∏—Ü—É –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è
            const expectedArrivalTable = modalBody.find('table').eq(1);
            // –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –Ω–∞–ª–∏—á–∏–∏ —Ç–æ–≤–∞—Ä–∞
            const rowsValueAV = availabilityTable.find('tbody tr');
            // –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞
            const rowsValueEX = expectedArrivalTable.find('tbody tr');


            //–ò—Ç–µ—Ä–∏—Ä—É–µ–º –ø–æ —Å—Ç—Ä–æ–∫–∞–º —Ç–∞–±–ª–∏—Ü—ã –Ω–∞–ª–∏—á–∏—è —Ç–æ–≤–∞—Ä–∞
            availabilityTable.each((index, row) => {

                const rowsNames = $$(row).find('thead tr');
                const names = $$(rowsNames).find('th[scope=col]');
                
                rowsValueAV.each((index, rowValue) => {
                    const cells = $$(rowValue).find('td');
                
                    // –ü—Ä–∏—Å–≤–∞–∏–≤–∞–∏–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
                    availabilityContent += '–ù–∞–ª–∏—á–∏–µ –Ω–∞ —Å–∫–ª–∞–¥–µ:\n';
                    availabilityContent += `${$$(names[0]).text()}: <code>${$$(cells[0]).text()}</code>\n`;
                    availabilityContent += `${$$(names[1]).text()}: ${$$(cells[1]).text()}\n`;
                    availabilityContent += `${$$(names[2]).text()}: ${$$(cells[2]).text()}\n`;
                    availabilityContent += `${$$(names[3]).text()}: ${$$(cells[3]).text()}\n\n`;
                });
            });

            //–ò—Ç–µ—Ä–∏—Ä—É–µ–º –ø–æ —Å—Ç—Ä–æ–∫–∞–º —Ç–∞–±–ª–∏—Ü—É 
            expectedArrivalTable.each((index, row) => {
                
                const rowsNames = $$(row).find('thead tr');
                const names = $$(rowsNames).find('th[scope=col]');

                rowsValueEX.each((index, rowValue) => {
                    const cells = $$(rowValue).find('td');
                
                    // –ü—Ä–∏—Å–≤–∞–∏–≤–∞–∏–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
                    expectedArrivalContent += `–û–∂–∏–¥–∞–µ–º–æ–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ:\n`;
                    expectedArrivalContent += `${$$(names[0]).text()}: <code>${$$(cells[0]).text()}</code>\n`;
                    expectedArrivalContent += `${$$(names[1]).text()}: ${$$(cells[1]).text()}\n`;
                    expectedArrivalContent += `${$$(names[2]).text()}: ${$$(cells[2]).text()}\n`;
                    expectedArrivalContent += `${$$(names[3]).text()}: ${$$(cells[3]).text()}\n\n`;
                });
            });

            if (botMsgIdx !== null) {
                bot.deleteMessage(chatId, botMsgIdx);
                botMsgIdx = null;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            if (availabilityTable.length === 0) {

                if (expectedArrivalTable.length === 1) {
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å—Ç–∞–≤–∫–∞—Ö —Ç–æ–≤–∞—Ä–∞
                    bot.sendMessage(chatId, `${expectedArrivalContent}`, startFindOptions);
                    console.log('–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å—Ç–∞–≤–∫–∞—Ö –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å–≤–∏–∏ –Ω–∞–ª–∏—á–∏—è, —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞');
                    return;

                } else {

                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ç–æ–≤–∞—Ä–∞
                    bot.sendMessage(chatId, '–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ç–æ–≤–∞—Ä –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞ —Å–∫–ª–∞–¥–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞', startFind1Options);
                    console.log('–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞');
                    return;
                }
            }
                
            if (expectedArrivalTable.length === 0) {
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–ª–∏—á–∏–∏ —Ç–æ–≤–∞—Ä–∞
                bot.sendMessage(chatId, `${availabilityContent}`, startFindOptions);
                console.log('–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–ª–∏—á–∏–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞');
                return;
            }
            
            if (availabilityTable !== expectedArrivalTable) {
            bot.sendMessage(chatId, `${availabilityContent}${expectedArrivalContent}`, startFindOptions);
            console.log('–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–ª–∏—á–∏–∏ –∏ –ø–æ—Å—Ç–∞–≤–∫–∞—Ö —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞');
            return;
            }

        } else {
            if (botMsgIdx !== null) {
                bot.deleteMessage(chatId, botMsgIdx);
                botMsgIdx = null;
            }
            bot.sendMessage(chatId, '–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –∞—Ä—Ç–∏–∫—É–ª–∞ –∏ –±—Ä–µ–Ω–¥–∞.', startFind1Options);
            return;
        }

    } catch (e) {
        console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞', e);
        if (botMsgIdx !== null) {
            bot.deleteMessage(chatId, botMsgIdx);
            botMsgIdx = null;
        }
        return bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞.', startFind1Options);
    }
   
}

// ======================================================================================================================================
// —Ñ—É–Ω–∫—Ü–∏—è html –∑–∞–ø—Ä–æ—Å–∞ –ø–æ –¥–∞–Ω–Ω—ã–º –∏–∑ –ë–î –Ω–∞ —Å–∞–π—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –î–ï–ö–û–† –¢–†–ï–ô–î
// ======================================================================================================================================

const startFindDecaro = async (chatId, msg) => {
    // lc = '/enterVC';
    const user = await UserModel.findOne({
        where: {
            chatId: chatId
        },
        attributes: ['id', 'chatId', 'lastCommand', 'vendorCode']
    });

    await user.update({lastCommand: '/enterVC'}, {
        where: {
            chatId: chatId
        }
    })

    try {

        //–§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –ø–æ–∏—Å–∫–∞
        const searchUrl = `https://dealer.decaro.ru/catalog/?tab=1&SECTION_ID=&ARTICLE=${user.vendorCode}&set_filter=y`;

        //–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–∞–π—Ç
        const response = await axios.get(searchUrl);
        const $ = cheerio.load(response.data);

        const firstProductLink = $('div.item-title a').attr('href');

        if (firstProductLink) {
            
            const productResponse = await axios.get(`https://dealer.decaro.ru${firstProductLink}`);

            let $$ = cheerio.load(productResponse.data);
            const inner_props = $$('div.inner_props div.prop');
            const dataId = $$('div.availability-table').toString().trim().split('"')[3];
            let chars = ''; 

            
            // —Å–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ prop
            const propsData = inner_props.map((index, element) => {
                const rowsNames = $$(element).find('span');
                const rowsValue = $$(element).find('div.char_value');
                return {
                    name: rowsNames.text().trim(),
                    value: rowsValue.text().trim()
                }
            }).get(); // –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—ä–µ–∫—Ç Cheerio –≤ –æ–±—ã—á–Ω—ã–π –º–∞—Å—Å–∏–≤

            propsData.forEach((item) => {
                if (item.name.includes('–†–æ–∑–Ω–∏—á–Ω–∞—è —Ü–µ–Ω–∞') && item.name !== '–†–æ–∑–Ω–∏—á–Ω–∞—è —Ü–µ–Ω–∞') {
                    const rows = item.name.split('\n'); // —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –Ω–∞ –ø–æ–¥—Å—Ç—Ä–æ–∫–∏ –ø–æ –ø—Ä–æ–±–µ–ª—É
                    const row1 = rows[0].trim(); // "–†–∞–∑–Ω–∏—á–Ω–∞—è —Ü–µ–Ω–∞"
                    const row2 = rows[1].trim(); // —Å—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞
                    const row3 = rows[2].trim(); // –≤–∞–ª—é—Ç–∞ —Å—Ç–∞—Ä–æ–π —Ü–µ–Ω—ã
                    const row5 = rows[4].trim(); // –Ω–æ–≤–∞—è —Ü–µ–Ω–∞
                    const row6 = rows[5].trim(); // –≤–∞–ª—é—Ç–∞ –Ω–æ–≤–æ–π —Ü–µ–Ω—ã
                    chars += `${row1}: <s>${row2} ${row3}/—Ä—É–ª</s> ${row5} ${row6}/—Ä—É–ª\n`;
                    return;
                  }

                chars += `${item.name}: ${item.value}\n`;
            });
            
            if (botMsgIdx !== null) {
                bot.deleteMessage(chatId, botMsgIdx);
                botMsgIdx = null;
            }
            
            await bot.sendMessage(
                chatId,
                chars,
                { parse_mode: "HTML" }
            );
            
            await bot.sendMessage(
                chatId,
                `–ò–¥—ë—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ –∏ —Å—Ä–æ–∫–æ–≤ –ø–æ—Å—Ç–∞–≤–∫–∏ . . .`,
                { parse_mode: "HTML" }
            );
            botMsgIdx = msg.message_id += 2;
            
            const responseQty = await axios.post("https://dealer.decaro.ru/local/components/whatasoft/product.quantity/ajax.php", {
                    "id": `${dataId}`
                }, {
                    "headers": {
                    "content-type": "application/x-www-form-urlencoded; charset=UTF-8",
                    }
                })

            let $ = cheerio.load(responseQty.data.data);
            const availabilityTable = $('div.availability-table-section .item');

            if (availabilityTable.length > 0) {

                const availabilityTableValue = availabilityTable.map((index, element) => {

                    const rowsStatus = $(element).find('div.status');
                    const rowsDays = $(element).find('div.days');
                    const rowsDate = $(element).find('div.date');
                    const rowsArticul = $(element).find('div.articul');
                    const rowsQty = $(element).find('div.qty');
                    const rowsUnit = $(element).find('div.unit');
                    const rowsOther = $(element).find('small');

                    return {
                        status: rowsStatus.text().trim(),
                        days: rowsDays.text().trim(),
                        date: rowsDate.text().trim(),
                        articul: rowsArticul.text().trim(),
                        qty: rowsQty.text().trim(),
                        unit: rowsUnit.text().trim(),
                        other: rowsOther.text().trim()
                    }
                }).get(); // –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—ä–µ–∫—Ç Cheerio –≤ –æ–±—ã—á–Ω—ã–π –º–∞—Å—Å–∏–≤
            
                chars = '';

                // –≤—ã–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å—Å–∏–≤–∞ propsData
                availabilityTableValue.forEach((item) => {

                    chars += `<b>${item.status}:</b> `;

                    if (item.days !== null && item.days !== undefined) {
                        chars += `${item.days}`;
                    }                    
                    if (item.date !== null && item.date !== undefined) {
                        chars += `${item.date}`;
                    }
                    if (item.articul !== null && item.articul !== undefined) {
                        chars += `<code>${item.articul}</code> `;
                    }
                    if (item.qty !== null && item.qty !== undefined) {
                        chars += ` ${item.qty} `;
                    }
                    if (item.unit !== null && item.unit !== undefined) {
                        chars += `${item.unit}\n`;
                    }

                    chars += `${item.other}\n`
                });

                if (botMsgIdx !== null) {
                    bot.deleteMessage(chatId, botMsgIdx);
                    botMsgIdx = null;
                }
            
                return bot.sendMessage(
                    chatId,
                    chars,
                    startFindOptions
                );

            } else {

                if (botMsgIdx !== null) {
                    bot.deleteMessage(chatId, botMsgIdx);
                    botMsgIdx = null;
                }
                return bot.sendMessage(
                    chatId, 
                    `–û—Ç–≤–µ—Ç —Å–∞–π—Ç–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.`, 
                    startFind1Options
                );
                
            }

        } else {

            if (botMsgIdx !== null) {
                bot.deleteMessage(chatId, botMsgIdx);
                botMsgIdx = null;
            }
            return bot.sendMessage(
                chatId, 
                `${user.vendorcode} –Ω–∞ —Å–∞–π—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –∞—Ä—Ç–∏–∫—É–ª–∞`, 
                startFind1Options
            );
        }

    } catch (e) {
        console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞', e);
        if (botMsgIdx !== null) {
            bot.deleteMessage(chatId, botMsgIdx);
            botMsgIdx = null;
        }
        return bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞.', startFind1Options);
    }
}

// ======================================================================================================================================
// —Ñ—É–Ω–∫—Ü–∏—è html –∑–∞–ø—Ä–æ—Å–∞ –ø–æ –¥–∞–Ω–Ω—ã–º –∏–∑ –ë–î –Ω–∞ —Å–∞–π—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –õ–ï–í–ê–ù–¢–ò–ù
// ======================================================================================================================================

const startFindLevantin = async (chatId, msg) => {
    // lc = '/enterVC';
    const user = await UserModel.findOne({
        where: {
            chatId: chatId
        },
        attributes: [
            'id', 
            'chatId', 
            'lastCommand', 
            'vendorCode'
        ]
    });

    await user.update({
        lastCommand: '/enterVC'
    }, {
        where: {
            chatId: chatId
        }
    })

    let formatedVendorCode = user.vendorCode.replace(/,/g, '').replace(/galleria|arben/gi, '');
    let counter = 0;

    while (formatedVendorCode.includes("  ") && counter < 3) {
      formatedVendorCode = formatedVendorCode.replace(/\s\s/g, ' ');
      counter++;
    }

    try {

        const responseProduct = await axios.get(`http://www.galleriaarben.ru/catalog/exists/all/?arrFilterName=${formatedVendorCode.trim()}&set_filter=Y`);
        const $ = cheerio.load(responseProduct.data);

        const firstProductLink = $('div.row.catalog a').attr('href');

        if (firstProductLink) { 

            const responseAuth = await axios.post(`http://www.galleriaarben.ru/ajax/auth.php`, {
                backurl: `/ajax/auth.php`,
                AUTH_FORM: `Y`,
                TYPE: `AUTH`,
                Login: `–í–æ–π—Ç–∏`,
                USER_LOGIN: levantin_login,
                USER_PASSWORD: levantin_password
            },{
                "headers": {
                    "content-type": "application/x-www-form-urlencoded; charset=UTF-8",
                }
            });

            const cookies = responseAuth.headers['set-cookie'];
            
            const responseProductPage = await await axios.get(`http://www.galleriaarben.ru${firstProductLink}`, {
                headers: {
                  Cookie: cookies.join('; ') // –ø–µ—Ä–µ–¥–∞–µ–º cookies –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞
                }
            });

            const $$ = cheerio.load(responseProductPage.data);
            const availability = $$('.catalog-detail__available').text().trim();
            let message = '';

            // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω—É–∂–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
            const collection =  $$('.catalog-detail__header').text().trim();
            const title =  $$('.catalog-detail__title').eq(0).text().trim();
            const price =  $$('.catalog-detail__title').eq(1).text().trim();

            if (collection !== null) {
                message += `${collection}\n`;
            }
            if (title !== null) {
                message += `<b>${title}</b>\n`;
            }
            if (price !== null) {
                message += `${price}\n\n`;
            }

            // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω—É–∂–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ –ë–ª–æ–∫–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
            const charsBlock = $$('.small-12.medium-6.large-8.columns.catalog-detail__text');

            const charsBlock1 = charsBlock.find('.row').eq(1);
            const charsBlock2 = charsBlock.find('.row').eq(2);

            charsBlock1.each((index, element) => {
                const everyRow = $(element).text().trim().replace(/\s+/g, ' ').replace(/\n+/g, '\n'); // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å—Ç—Ä–æ–∫–∏ –∏ —É–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
                message += `${everyRow}\n`;
            });

            message += `\n`;

            charsBlock2.each((row, index, element) => {
                const everyRow = $(index).text().trim().replace(/\s+/g, ' ').replace(/\n+/g, '\n'); // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å—Ç—Ä–æ–∫–∏ –∏ —É–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
                message += `${everyRow}\n`;
            });

            message += `\n`;
            message += `<b>–í –Ω–∞–ª–∏—á–∏–∏:</b> ${availability.replace(/\s+/g, '')}\n\n`;
            message += ``;
            message += `<i>–º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ —Å–ª–µ–¥—É—é—â–∏–π –∞—Ä—Ç–∏–∫—É–ª –¥–ª—è –ø–æ–∏—Å–∫–∞</i>`;

            if (botMsgIdx !== null) {
                bot.deleteMessage(chatId, botMsgIdx);
                botMsgIdx = null;
            }

            return bot.sendMessage(
                chatId, 
                message, 
                startFindOptions
            );

        } else {
        
            if (botMsgIdx !== null) {
                bot.deleteMessage(chatId, botMsgIdx);
                botMsgIdx = null;
            }
            return bot.sendMessage(
                chatId, 
                '–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –±—Ä–µ–Ω–¥ –≤–º–µ—Å—Ç–µ —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º, —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.\n–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞ –≤ 1–°.', 
                startFind1Options
            );
        }

    } catch (e) {

        console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞', e);

        if (botMsgIdx !== null) {
            bot.deleteMessage(chatId, botMsgIdx);
            botMsgIdx = null;
        }

        return bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞.', startFindOptions);
    }
}

// ======================================================================================================================================
// —Ñ—É–Ω–∫—Ü–∏—è html –∑–∞–ø—Ä–æ—Å–∞ –ø–æ –¥–∞–Ω–Ω—ã–º –∏–∑ –ë–î –Ω–∞ —Å–∞–π—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ UltraWood
// ======================================================================================================================================

async function findUW(chatId) {

    const user = await UserModel.findOne({
        where: {
            chatId: chatId
        },
        attributes: [
            'id', 
            'chatId', 
            'lastCommand',
            'vendorCode'
        ]
    });

    try {
    
        const responseProduct = await axios.get(`https://ultrawood.ru/bitrix/components/dresscode/search.line/templates/version2/ajax.php?IBLOCK_ID=15ELEMENT_SORT_ORDER=asc&SEARCH_QUERY=${user.vendorCode}`);
        const $ = cheerio.load(responseProduct.data);
        const productLink = $('.name').attr('href');
    
        if (productLink) {

            const responseProductFull = await axios.get(`https://ultrawood.ru${productLink}`);
            const $$ = cheerio.load(responseProductFull.data);
            const dataMaxQuantity = $$('.qtyBlock .qty').attr('data-max-quantity');
        
            if (botMsgIdx !== null) {
                bot.deleteMessage(chatId, botMsgIdx);
                botMsgIdx = null;
            }
    
            return bot.sendMessage(
                chatId,
                `–û—Å—Ç–∞—Ç–æ–∫ ${user.vendorCode}: ${dataMaxQuantity} —à—Ç`
            );

        } else {

            if (botMsgIdx !== null) {
                bot.deleteMessage(chatId, botMsgIdx);
                botMsgIdx = null;
            }
            
            return bot.sendMessage(
                chatId,
                `–ê—Ä—Ç–∏–∫—É–ª ${user.vendorCode} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–∞–π—Ç–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞.`
            );

        }
    
    } catch (e) {
        
        console.log(e);
        return bot.sendMessage(
            chatId,
            `–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –≤ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–¥–∞ –ø–æ–∏—Å–∫–∞ Ultrawood:\n${e}`
        )
    }

}

// ======================================================================================================================================
// —Ñ—É–Ω–∫—Ü–∏—è html –∑–∞–ø—Ä–æ—Å–∞ –ø–æ –¥–∞–Ω–Ω—ã–º –∏–∑ –ë–î –Ω–∞ —Å–∞–π—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ Designers Guild
// ======================================================================================================================================

const startFindDesignersGuild = async (chatId, msg) => {

    const user = await UserModel.findOne({
        where: {
            chatId: chatId
        },
        attributes: [
            'id', 
            'chatId', 
            'lastCommand',
            'vendorCode'
        ]
    });

    await user.update({
        lastCommand: '/enterVC'
    }, {
        where: {
            chatId: chatId
        }
    });

    try {

        const securityLink = `https://trade.designersguild.com/b2b2/Content/Security/Default.aspx/callbackVerifyLogin`;
        const getProductsLink = `https://trade.designersguild.com/b2b2/Content/ViewProductDetails/Default.aspx/callbackGetProductDetails`;
        const getProductQuantityLink = `https://trade.designersguild.com/b2b2/Content/StockEnquiryItemBreakdown/Default.aspx/callbackGetProductDetails`;
        let units = ''; // –µ–¥–µ–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è

        if ( user.vendorCode.toUpperCase().includes('P') ) {
            units = '—Ä—É–ª.'
        } else if ( user.vendorCode.toUpperCase().includes('F') ) {
            units = '–º.–ø.'
        } else if ( user.vendorCode.toUpperCase().includes('CC') ) {
            units = '—à—Ç.'
        } else if ( 
            user.vendorCode.toUpperCase().includes('CC') ||
            user.vendorCode.toUpperCase().includes('BL') ||
            user.vendorCode.toUpperCase().includes('RUG')
        ) {
            units = '—à—Ç.'
        } else {
            units = '–µ–¥.'
        }

        const securityDG = await axios.post(
            securityLink, 
            {
                l_stPassUserName: loginDG,
                l_stPassPassword: passwordDG,
                blnRememberMe: true,
                ignore_browser: true
            },
            {
                proxy: false,
                httpsAgent: agent,
                headers: {
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36',
                    'Content-Type': 'application/json'
                }
            }
        );

        console.log(securityDG.data.toString());
        const cookies = securityDG.headers['set-cookie'];
            

        const getProducts = await axios.post(
            getProductsLink, 
            {
                l_stPassTag : user.vendorCode,
                l_stPassProdCode: user.vendorCode,
                l_stPassFromOrder: 'N'
            },
            {
                proxy: false,
                httpsAgent: agent,
                headers: {
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36',
                    'Content-Type': 'application/json',
                    Cookie: cookies.join('; ') // –ø–µ—Ä–µ–¥–∞–µ–º cookies –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞
                }
            }
        );

        const $ = cheerio.load(getProducts.data);
        const FREESTOCK = $('fd[id="FREESTOCK"]').attr('value');

        const getProductQuantity = await axios.post(
            getProductQuantityLink,
            {
                l_stPassTag:"",
                l_stPassProdCode: user.vendorCode
            }, {
                proxy: false,
                httpsAgent: agent,
                headers: {
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36',
                    'Content-Type': 'application/json',
                    Cookie: cookies.join('; ') // –ø–µ—Ä–µ–¥–∞–µ–º cookies –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞
                }
            }
        );

        const $$ = cheerio.load(getProductQuantity.data);
        const BATCHNOS = $$('BATCHNOS').text();
        const NOPIECES = $$('NOPIECES').text();
        const PIECELENGTHS = $$('PIECELENGTHS').text();
        const PODUEDATES = $$('PODUEDATES').text();
        const PONOS = $$('PONOS').text();
        const POQTYS = $$('POQTYS').text();

        let message = '–ü–∞—Ä—Ç–∏—è:\n';
        const batchNosArr = BATCHNOS.split('|');
        const noPiecesArr = NOPIECES.split('|');
        const pieceLengthsArr = PIECELENGTHS.split('|');

        for (let i = 0; i < batchNosArr.length; i++) {

            let space = ''; // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–±–µ–ª–æ–≤ –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤

            if (
                batchNosArr[i].length < 15 &&
                batchNosArr[i].length > 5 
                ) {
                const diff = 15 - batchNosArr[i].length;
                space = ' '.repeat(diff);
            } else {
                space = ' '.repeat(5);
            }

            message += `<code>${batchNosArr[i]}</code><code>${space}</code>`;

            if (noPiecesArr[i]) {
              message += `${noPiecesArr[i]} —à—Ç          `;
            }

            message += `${pieceLengthsArr[i]} ${units}\n`;
        }

        const podueDatesArr = PODUEDATES.split('|');
        const poNosArr = PONOS.split('|');
        const poQtysArr = POQTYS.split('|');
        message += '\n–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ:\n'

        for (let i = 0; i < podueDatesArr.length; i++) {
            if (podueDatesArr[i]) {
                message += `${podueDatesArr[i]}     <code>${poNosArr[i]}</code>     ${poQtysArr[i]} ${units}`;
            } else {
                message += '–Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è.'
            }
        }
    
        if (botMsgIdx !== null) {
            bot.deleteMessage(chatId, botMsgIdx);
            botMsgIdx = null;
        }

        return bot.sendMessage(
            chatId,
            `–°–≤–æ–±–æ–¥–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫ <b>${user.vendorCode}</b> —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ <b>${FREESTOCK} ${units}</b> –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö:\n${message}`,
            { parse_mode: 'HTML' }
        );
            
        

    } catch (e) {
        
        console.log( '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫', e);
    }

}

// ======================================================================================================================================
// —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email —Å –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ
// ======================================================================================================================================

const sendReserveEmail = async (chatId) => {

    const user = await UserModel.findOne({
        where: {
            chatId: chatId
        },
        attributes: ['id', 'chatId', 'subject', 'textMail', 'email', 'vendorEmail']
    });
    
    const recipient = `${user.vendorEmail}`;     // email –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
    const copy = `purchasing@manders.ru`;   //–í–ê–ñ–ù–û: –°—Ç–∞–≤–∏—Ç—å –≤ –∫–æ–ø–∏—é —Ç–æ–ª—å–∫–æ     purchasing@manders.ru

    try {
        if (user.vendor !== null) {
            // const formatedUserVendor = user.vendor.replace(/[\s-]/g, '');  –ù–∞ —Å–ª—É—á–∞–π –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π –ø–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É

            let result = transporter.sendMail({
                from: 'zakupki_bot@manders.ru',
                to: `${recipient}, ${copy}, nick.of.darkwood@gmail.com`,
                subject: user.subject,
                text: user.textMail,
            });
            
            return bot.sendMessage(
                chatId, 
                `–°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–º–æ–π: \n<pre>"${user.subject}"</pre>\n—É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É –∏ –≤ –æ—Ç–¥–µ–ª –∑–∞–∫—É–ø–æ–∫.\n\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –ø–∏—Å—å–º–æ —Å –≤—ã—à–µ—É–ø–æ–º—è–Ω—É—Ç–æ–π —Ç–µ–º–æ–π –Ω–∞ <b>purchasing_internal@manders.ru</b>.`, 
                beginWork2Options
            );
        }
        
    } catch (e) {
        console.error(e);
        throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email');
    }
}

// ======================================================================================================================================
// —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —ç–∫—Å–µ–ª—å —Ñ–∞–π–ª–∞
// ======================================================================================================================================

async function findExcelFile(
    fileNameWallpaper = '', 
    fileNameTextile = '', 
    fileNamePricelist = '',
    fileNameOracMSK = '', 
    fileNameOracSPB = '',
    fileNameDecorDelux = '',
    fileNameDecorRus = '',
    fileNameBautex = '',
    fileNameLoymina = '',
    fileNameSirpi = '',
    fileNameBrink = '',
    fileNameLg = '',
    ) {

    const folderPath = '/root/zak/xl';
    // const folderPath = 'C:\\node.js\\zak\\xl';   //Dev
    const files = await fs.promises.readdir(folderPath);

    for (const file of files) {

        const filePath = path.join(folderPath, file);
        const stat = await fs.promises.stat(filePath);

        if (stat.isDirectory()) {

            const result = await findExcelFile(filePath, 
                fileNameWallpaper, 
                fileNameTextile, 
                fileNamePricelist, 
                fileNameOracMSK, 
                fileNameOracSPB,
                fileNameDecorDelux,
                fileNameDecorRus,
                fileNameBautex,
                fileNameLoymina,
                fileNameSirpi,
                fileNameBrink,
                fileNameLg
                );

            if (result.fileNameWallpaper) {
                fileNameWallpaper = result.fileNameWallpaper;

            } else if (result.fileNameTextile) {
                fileNameTextile = result.fileNameTextile;

            } else if (result.fileNamePricelist) {
                fileNamePricelist = result.fileNamePricelist;

            } else if (result.fileNameOracMSK) {
                fileNameOracMSK = result.fileNameOracMSK;

            } else if (result.fileNameOracSPB) {
                fileNameOracSPB = result.fileNameOracSPB;

            } else if (result.fileNameDecorDelux) {
                fileNameDecorDelux = result.fileNameDecorDelux;

            } else if (result.fileNameDecorRus) {
                fileNameDecorRus = result.fileNameDecorRus;

            } else if (result.fileNameBautex) {
                fileNameBautex = result.fileNameBautex;

            } else if (result.fileNameLoymina) {
                fileNameLoymina = result.fileNameLoymina;

            } else if (result.fileNameSirpi) {
                fileNameSirpi = result.fileNameSirpi;

            } else if (result.fileNameBrink) {
                fileNameBrink = result.fileNameBrink;

            } else if (result.fileNameLg) {
                fileNameLg = result.fileNameLg;

            }

        } else if (path.extname(file) === '.xlsx') {
            
            if (file.toLowerCase().includes('–∫–∞—Ç–∞–ª–æ–≥–∏_—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ_–≤_—Å–∞–ª–æ–Ω—ã_26_09_19')) {
                fileNameWallpaper = filePath;
            } else if (file.toLowerCase().includes('—Ç–µ–∫—Å—Ç–∏–ª—å_–∫–∞—Ç–∞–ª–æ–≥–∏_—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ_–≤_—Å–∞–ª–æ–Ω—ã')) {
                fileNameTextile = filePath;
            } else if (file.toLowerCase().includes('—Å–ø–∏—Å–æ–∫_–ø—Ä–∞–π—Å–ª–∏—Å—Ç–æ–≤')) {
                fileNamePricelist = filePath;
            } else if (file.toLowerCase().includes('orac_–º—Å–∫')) {
                fileNameOracMSK = filePath;
            } else if (file.toLowerCase().includes('orac_—Å–ø–±')) {
                fileNameOracSPB = filePath;
            } else if (file.toLowerCase().includes('–±–∞—É—Ç–µ–∫—Å')) {
                fileNameBautex = filePath;
            } else if (file.toLowerCase().includes('brink&campman')) {
                fileNameBrink = filePath;
            } else if (file.toLowerCase().includes('lg_ppl_wallpaper')) {
                fileNameLg = filePath;
            }
        } else if (path.extname(file) === '.xls') {

            if (file.toLowerCase().includes('–¥–µ–∫–æ—Ä_–¥–µ–ª—é–∫—Å')) {
                fileNameDecorDelux = filePath;
            } else if (file.toLowerCase().includes('–¥–µ–∫–æ—Ä_—Ä—É—Å')) {
                fileNameDecorRus = filePath;
            } else if (file.toLowerCase().includes('–ª–æ–π–º–∏–Ω–∞')) {
                fileNameLoymina = filePath;
            } else if (file.toLowerCase().includes('—Å–∏—Ä–ø–∏')) {
                fileNameSirpi = filePath;
            }
        }
        if (fileNameWallpaper && 
            fileNameTextile && 
            fileNamePricelist && 
            fileNameOracMSK &&
            fileNameOracSPB && 
            fileNameDecorDelux && 
            fileNameDecorRus &&
            fileNameBautex &&
            fileNameLoymina &&
            fileNameSirpi &&
            fileNameBrink &&
            fileNameLg
            ) {
            break;
        }
    }
    return { 
        fileNameWallpaper, 
        fileNameTextile, 
        fileNamePricelist, 
        fileNameOracMSK,
        fileNameOracSPB,
        fileNameDecorDelux,
        fileNameDecorRus,
        fileNameBautex,
        fileNameLoymina,
        fileNameSirpi,
        fileNameBrink,
        fileNameLg
    };
}

// ======================================================================================================================================
// —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∞—Ä—Ç–∏–∫—É–ª–∞ ORAC
// ======================================================================================================================================

async function findOrac(chatId) {
        
    const resultMSK = await findExcelFile('orac_–º—Å–∫');
    const resultSPB = await findExcelFile('orac_—Å–ø–±');
    
    const filePathMSK = resultMSK.fileNameOracMSK;
    const filePathSPB = resultSPB.fileNameOracSPB;
    
    let messageORAC = '';
    
    const user = await UserModel.findOne({
        where: {
            chatId: chatId
        }
    });

    let vendorCode = user.vendorCode;
    const findResult1C = await startRequest1C(chatId, vendorCode);

    if (findResult1C) {

        messageORAC = `–ü–æ –¥–∞–Ω–Ω—ã–º 1–°:\n${findResult1C.messageResult1C}\n\n`;
    } else {

        messageORAC += `–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ 1–° –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ\n<i>—ç—Ç–æ –Ω–æ—Ä–º–∞ –≤–æ –≤–Ω–µ—Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è –º–∞–≥–∞–∑–∏–Ω–æ–≤</i>\n\n`
    }

    if (filePathMSK) {

        try {
            
            const workbookMSK = new ExcelJS.Workbook();
            const streamMSK = fs.createReadStream(filePathMSK);
            const worksheetMSK = await workbookMSK.xlsx.read(streamMSK);
            const firstWorksheetMSK = worksheetMSK.worksheets[0];

            let foundMatchOracMSK = false;
            
            firstWorksheetMSK.eachRow( async (row, rowNumber) => {

                const cellValue = row.getCell('A').value; //–ê—Ä—Ç–∏–∫—É–ª
                const formatedCellValue = cellValue.toString().trim().replace(/[\u00A0]/g, ' ');
                const formatedUserVC = user.vendorCode.toString().trim().replace(/—Å/gi, 'c');
                
                if (formatedCellValue === formatedUserVC) {
                    foundMatchOracMSK = true;
            
                    const headerRow = firstWorksheetMSK.getRow(2);
                    let bValue, cValue;
            
                    headerRow.eachCell((cell, colNumber) => {
                        const headerCellValue = cell.value.toString().trim();
                        
                        if (headerCellValue === '–ï–¥. –∏–∑–º.') {
                            bValue = row.getCell(colNumber).value;
                        } else if (headerCellValue === '–î–æ—Å—Ç—É–ø–Ω–æ') {
                            cValue = row.getCell(colNumber).value;
                        }
                    });
            
                    let a3Value = firstWorksheetMSK.getCell('A3').value; //–ù–∞–∑–≤–∞–Ω–∏–µ —Å–∫–ª–∞–¥–∞
                    a3Value = a3Value.toString().split( "(" )[0];
            
                    messageORAC += `–ê—Ä—Ç–∏–∫—É–ª <b>${cellValue}</b> –∏–º–µ–µ—Ç—Å—è –Ω–∞ —Å–∫–ª–∞–¥–µ –û–†–ê–ö "<b>${a3Value}</b>"\n`;
            
                    if (bValue && cValue) {
                        messageORAC += `–≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ <b>${cValue}</b> <b>${bValue}</b>\n\n`;
                    }
            
                    if (botMsgIdx !== null) {
                        bot.deleteMessage(chatId, botMsgIdx);
                        botMsgIdx = null;
                    }
                }
            });

            if (!foundMatchOracMSK) {

                if (botMsgIdx !== null) {
                    bot.deleteMessage(chatId, botMsgIdx);
                    botMsgIdx = null;
                }

                messageORAC += `–ù–∞ —Å–∫–ª–∞–¥–µ –û–†–ê–ö –≤ –ú–æ—Å–∫–≤–µ –∞—Ä—Ç–∏–∫—É–ª <b>${user.vendorCode}</b> –æ—Ç—Å—É—Ç—Å–≤—É–µ—Ç.\n\n`;
            }

        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ ${filePathMSK}:`, error); 
        }
    }

    if (filePathSPB) {

        try {

            // const workbookSPB = XLSX.readFile(filePathSPB);
            // const worksheetSPB = workbookSPB.Sheets[workbookSPB.SheetNames[0]];

            // let foundMatchOracSPB = false;

            // for (let i = 2; i <= worksheetSPB['!range'].e.r; i++) {

            //     const cellValue = worksheetSPB[`A${i}`]?.v;
            //     const formatedCellValue = cellValue?.toString().trim().replace(/[\u00A0]/g, ' ');
            //     const formatedUserVC = user.vendorCode.toString().trim();

            //     if (formatedCellValue === formatedUserVC) {
            //         foundMatchOracSPB = true;
            //         let bValue, cValue;
            //         for (let j = 1; j <= worksheetSPB['!range'].e.c; j++) {

            //             const headerCellValue = worksheetSPB[`${XLSX.utils.encode_col(j)}2`]?.v?.toString().trim();

            //             if (headerCellValue === '–ï–¥. –∏–∑–º.') {

            //                 bValue = worksheetSPB[`${XLSX.utils.encode_col(j)}${i}`]?.v;
            //             } else if (headerCellValue === '–î–æ—Å—Ç—É–ø–Ω–æ') {
            //                 cValue = worksheetSPB[`${XLSX.utils.encode_col(j)}${i}`]?.v;
            //             }
            //         }

            //         let a3Value = worksheetSPB['A3']?.v; //–ù–∞–∑–≤–∞–Ω–∏–µ —Å–∫–ª–∞–¥–∞
            //         a3Value = a3Value?.toString().split( "(" )[0];
            //         messageORAC += `–ê—Ä—Ç–∏–∫—É–ª <b>${cellValue}</b> –∏–º–µ–µ—Ç—Å—è –Ω–∞ —Å–∫–ª–∞–¥–µ –û–†–ê–ö "<b>${a3Value}</b>"\n`;

            //         if (cValue && bValue) {
            //             messageORAC += `–≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ <b>${cValue}</b> <b>${bValue}</b>\n\n`;
            //         }

            //         if (botMsgIdx !== null) {
            //             bot.deleteMessage(chatId, botMsgIdx);
            //             botMsgIdx = null;
            //         }
            //     }
            // }
            
            const workbookSPB = new ExcelJS.Workbook();
            const streamSPB = fs.createReadStream(filePathSPB);
            const worksheetSPB = await workbookSPB.xlsx.read(streamSPB);
            const firstWorksheetSPB = worksheetSPB.worksheets[0];

            let foundMatchOracSPB = false;

            firstWorksheetSPB.eachRow( async (row, rowNumber) => {

                const cellValue = row.getCell('A').value; //–ê—Ä—Ç–∏–∫—É–ª
                const formatedCellValue = cellValue.toString().trim().replace(/[\u00A0]/g, ' ');
                const formatedUserVC = user.vendorCode.toString().trim().replace(/—Å/gi, 'c');
                
                if (formatedCellValue === formatedUserVC) {
                    foundMatchOracSPB = true;
            
                    const headerRow = firstWorksheetSPB.getRow(2);
                    let bValue, cValue;
            
                    headerRow.eachCell((cell, colNumber) => {
                        const headerCellValue = cell.value.toString().trim();
                        
                        if (headerCellValue === '–ï–¥. –∏–∑–º.') {
                            bValue = row.getCell(colNumber).value;
                        } else if (headerCellValue === '–î–æ—Å—Ç—É–ø–Ω–æ') {
                            cValue = row.getCell(colNumber).value;
                        }
                    });
            
                    let a3Value = firstWorksheetSPB.getCell('A3').value; //–ù–∞–∑–≤–∞–Ω–∏–µ —Å–∫–ª–∞–¥–∞
                    a3Value = a3Value.toString().split( "(" )[0];
            
                    messageORAC += `–ê—Ä—Ç–∏–∫—É–ª <b>${cellValue}</b> –∏–º–µ–µ—Ç—Å—è –Ω–∞ —Å–∫–ª–∞–¥–µ –û–†–ê–ö "<b>${a3Value}</b>"\n`;
            
                    if (cValue && bValue) {
                        messageORAC += `–≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ <b>${cValue}</b> <b>${bValue}</b>\n\n`;
                    }
            
                    if (botMsgIdx !== null) {
                        bot.deleteMessage(chatId, botMsgIdx);
                        botMsgIdx = null;
                    }
                }
            });
            
            if (!foundMatchOracSPB) {
                
                if (botMsgIdx !== null) {
                    bot.deleteMessage(chatId, botMsgIdx);
                    botMsgIdx = null;
                }
                
                messageORAC += `–ù–∞ —Å–∫–ª–∞–¥–µ –û–†–ê–ö –≤ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ –∞—Ä—Ç–∏–∫—É–ª <b>${user.vendorCode}</b> –æ—Ç—Å—É—Ç—Å–≤—É–µ—Ç.\n\n`;
            }
            
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ ${filePathSPB}:`, error); 
        }
    }
    messageORAC += `<strong><u>–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä —á–µ—Ä–µ–∑ 2 —Å–∫–ª–∞–¥–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –¥–ª—è 1–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞, —Ç–æ –¥–µ–ª–∞–π—Ç–µ 2 –ó–ê–ö–ê–ó–ê –ü–û–°–¢–ê–í–©–ò–ö–£!!</u></strong>\n\n<strong>–í–ê–ñ–ù–û</strong>: –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å—Ä–æ–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ = –ù–ï –±–æ–ª–µ–µ 5 –º–µ—Å—è—Ü–µ–≤ (–æ—Ç –¥–∞—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ –Ω–∞—à —Å–∫–ª–∞–¥)\n`;
    return bot.sendMessage(chatId, messageORAC, { parse_mode: "HTML" });
    
}

// ======================================================================================================================================
//—Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ –æ–±–æ–µ–≤
// ======================================================================================================================================

async function findCatalogWallpaper(chatId) {

    let fileNameWallpaper = '–ö–∞—Ç–∞–ª–æ–≥–∏_—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ_–≤_—Å–∞–ª–æ–Ω—ã_26_09_19';
    fileNameWallpaper = fileNameWallpaper.toLowerCase();
    const result = await findExcelFile(fileNameWallpaper);
    const filePath = result.fileNameWallpaper;

    if (filePath) {

        const user = await UserModel.findOne({
            where: {
              chatId: chatId
            }
        });

        try { 

            const workbook = new ExcelJS.Workbook();
            const stream = fs.createReadStream(filePath);
            const worksheet = await workbook.xlsx.read(stream);
            const firstWorksheet = worksheet.worksheets[0];

            let foundMatchWallpaper = false;

            firstWorksheet.eachRow( async (row, rowNumber) => {
                const cellValue = row.getCell('D').value;

                if (cellValue !== null) {

                    const formatedCellValue = cellValue.toString().replace(/[\s\u00A0]/g, '').toLowerCase();
                    const formatedUserCatalog = user.catalog.toString().replace(/[\s\u00A0]/g, '').toLowerCase();
                    
                    if (formatedCellValue.includes(formatedUserCatalog)) {
                        foundMatchWallpaper = true;
                        let message = '';
                        
                        const bValue = row.getCell('B').value;
                        let cValue = row.getCell('C').value.toString();
                        const oValue = row.getCell('O').value;
                        const pValue = row.getCell('P').value;
                        const vendorCode = bValue;

                        await user.update({
                            brand: cValue.toUpperCase()
                        });

                        let findResult1C = await startRequest1C(chatId, vendorCode);
                        let PricelistLink = await findPricelistLink(chatId, cValue);


                        if (findResult1C) {
                            
                            let formatedMessageResult1C = findResult1C.messageResult1C.toLowerCase().includes('–Ω–µ —á–∏—Å–ª–∏—Ç—Å—è');
                            
                            if (!formatedMessageResult1C) {
    
                                const o1Value = firstWorksheet.getCell('O1').value;
                                const p1Value = firstWorksheet.getCell('P1').value;
    
                                message += `<b>${cellValue.trim()}</b> –±—Ä–µ–Ω–¥–∞ <b>${cValue.toUpperCase()}</b> –∏–º–µ–µ—Ç—Å—è –≤ Manders:\n\n`;
    
                                if (findResult1C.messageResult1C) {
    
                                    message += `–ü–æ –¥–∞–Ω–Ω—ã–º 1–°:\n${findResult1C.messageResult1C}\n`
                                }
    
                                if (oValue !== null) {
                                    message += `${o1Value}: ${oValue}\n`;
                                }
    
                                if (pValue !== null) {
                                    message += `${p1Value}: ${pValue}\n`;
                                }
    
                                message += `\n${PricelistLink.messagePrice}`;
                                message += `<i>–ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–æ–ª–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ù–£–ñ–ù–û–ì–û –í–ê–ú –∫–∞—Ç–∞–ª–æ–≥–∞ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É —Å–Ω–æ–≤–∞</i>`;
    
                                if (botMsgIdx !== null) {
                                    bot.deleteMessage(chatId, botMsgIdx);
                                    botMsgIdx = null;
                                }
    
                                return bot.sendMessage(
                                    chatId, 
                                    message, 
                                    {
                                        parse_mode: 'HTML',
                                        reply_markup: JSON.stringify( {
                                            inline_keyboard: [
                                                [{text: '–ö —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—É–ø–µ–Ω–∏ –ø–æ–∏—Å–∫–∞ ‚û°', callback_data: `checkVendor=${cValue}`}],
                                                [{text: '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üìã', callback_data: '/mainmenu'}],
                                            ]
                                        })
                                    }
                                );
    
                            } else {
    
                                if (botMsgIdx !== null) {
                                    bot.deleteMessage(chatId, botMsgIdx);
                                    botMsgIdx = null;
                                }
    
                                return bot.sendMessage(
                                    chatId, 
                                    `–ö–∞—Ç–∞–ª–æ–≥–∞ –≤ —Å–∞–ª–æ–Ω–∞—Ö –Ω–µ—Ç.\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –Æ–ª–∏–∏ –°–∫—Ä–∏–±–Ω–∏–∫ –∑–∞ —É—Ç–æ—á–Ω–µ–Ω–∏–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞ –¥–∞–Ω–Ω–æ–≥–æ –∞—Ä—Ç–∏–∫—É–ª–∞.\nskribnik@manders.ru\n<code>+7 966 321-80-08</code>\n\n${PricelistLink.messagePrice}`,
                                    { parse_mode: 'HTML' }
                                );
                            }

                        } else {
                            
                            if (botMsgIdx !== null) {
                                bot.deleteMessage(chatId, botMsgIdx);
                                botMsgIdx = null;
                            }

                            return bot.sendMessage(
                                chatId, 
                                `–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ 1–° –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ\n<i>—ç—Ç–æ –Ω–æ—Ä–º–∞ –≤–æ –≤–Ω–µ—Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è –º–∞–≥–∞–∑–∏–Ω–æ–≤</i>`, 
                                { parse_mode: 'HTML' }
                            );
                        }

                    }
                }
            });

            if (!foundMatchWallpaper) {
                return null;
            }

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ Excel:', error);
        }
    }
}

// ======================================================================================================================================
//—Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–µ–∫—Å—Ç–∏–ª—è
// ======================================================================================================================================

async function findCatalogTextile(chatId) {

    let fileNameTextile = '–¢–µ–∫—Å—Ç–∏–ª—å_–ö–∞—Ç–∞–ª–æ–≥–∏_—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ_–≤_—Å–∞–ª–æ–Ω—ã';
    fileNameTextile = fileNameTextile.toLowerCase();
    const result = await findExcelFile(fileNameTextile);
    const filePath = result.fileNameTextile;

    if (filePath) {

        const user = await UserModel.findOne({
            where: {
              chatId: chatId
            }
        });

        try { 

            const workbook = new ExcelJS.Workbook();
            const stream = fs.createReadStream(filePath);
            const worksheet = await workbook.xlsx.read(stream);
            const firstWorksheet = worksheet.worksheets[0];

            let foundMatchTextile = false;

            firstWorksheet.eachRow( async (row, rowNumber) => {
                const cellValue = row.getCell('D').value;

                if (cellValue !== null) {

                    const formatedCellValue = cellValue.toString().replace(/[\s\u00A0]/g, '').toLowerCase();
                    const formatedUserCatalog = user.catalog.toString().replace(/[\s\u00A0]/g, '').toLowerCase();
                
                    if (formatedCellValue.includes(formatedUserCatalog)) {
                        foundMatchTextile = true;
                        let message = '';

                        const bValue = row.getCell('B').value;
                        let cValue = row.getCell('C').value.toString();
                        const pValue = row.getCell('P').value;
                        const vendorCode = bValue;

                        await user.update({brand: cValue.toUpperCase()});
                        let findResult1C = await startRequest1C(chatId, vendorCode);
                        let PricelistLink = await findPricelistLink(chatId, cValue);

                        if (findResult1C) {
                            
                            let formatedMessageResult1C = findResult1C.messageResult1C.toLowerCase().includes('–Ω–µ —á–∏—Å–ª–∏—Ç—Å—è');

                            if (!formatedMessageResult1C) {
    
                                const p1Value = firstWorksheet.getCell(`P1`).value;
    
                                message += `<b>${cellValue.trim()}</b> –±—Ä–µ–Ω–¥–∞ <b>${cValue.toUpperCase()}</b> –∏–º–µ–µ—Ç—Å—è –≤ Manders:\n`;
    
                                if (findResult1C.messageResult1C) {
    
                                    message += `–ü–æ –¥–∞–Ω–Ω—ã–º 1–°:\n${findResult1C.messageResult1C}\n`
                                }
    
                                if (pValue !== null) {
                                    message += `${p1Value}: ${pValue}\n`;
                                }
                                
                                message += `\n${PricelistLink.messagePrice}`;
                                message += `<i>–ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–æ–ª–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ù–£–ñ–ù–û–ì–û –í–ê–ú –∫–∞—Ç–∞–ª–æ–≥–∞ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É —Å–Ω–æ–≤–∞</i>`;
                                
                                if (botMsgIdx !== null) {
                                    bot.deleteMessage(chatId, botMsgIdx);
                                    botMsgIdx = null;
                                }
                                
                                await bot.sendMessage(
                                    chatId, 
                                    message, 
                                    {
                                        parse_mode: 'HTML',
                                        reply_markup: JSON.stringify( {
                                            inline_keyboard: [
                                                [{text: '–ö —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—É–ø–µ–Ω–∏ –ø–æ–∏—Å–∫–∞ ‚û°', callback_data: `checkVendor=${cValue}`}],
                                                [{text: '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üìã', callback_data: '/mainmenu'}],
                                            ]
                                        })
                                    }
                                );

                            } else {

                                if (botMsgIdx !== null) {
                                    bot.deleteMessage(chatId, botMsgIdx);
                                    botMsgIdx = null;
                                }

                                return bot.sendMessage(
                                chatId, 
                                `–ö–∞—Ç–∞–ª–æ–≥–∞ –≤ —Å–∞–ª–æ–Ω–∞—Ö –Ω–µ—Ç.\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –Æ–ª–∏–∏ –°–∫—Ä–∏–±–Ω–∏–∫ –∑–∞ —É—Ç–æ—á–Ω–µ–Ω–∏–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞ –¥–∞–Ω–Ω–æ–≥–æ –∞—Ä—Ç–∏–∫—É–ª–∞.\nskribnik@manders.ru\n<code>+7 966 321-80-08</code>\n\n${PricelistLink.messagePrice}`, 
                                { parse_mode: 'HTML' }
                                );
                            }

                        } else {

                            if (botMsgIdx !== null) {
                                bot.deleteMessage(chatId, botMsgIdx);
                                botMsgIdx = null;
                            }

                            return bot.sendMessage(
                                chatId, 
                                `–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ 1–° –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ\n<i>—ç—Ç–æ –Ω–æ—Ä–º–∞ –≤–æ –≤–Ω–µ—Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è –º–∞–≥–∞–∑–∏–Ω–æ–≤</i>`, 
                                { parse_mode: 'HTML' }
                            );
                        }
                    }
                }
            });

            if (!foundMatchTextile) {
                return null;
            }

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ Excel:', error);
        }
    }
}

// ======================================================================================================================================
//—Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–∞–π—Å–ª–∏—Å—Ç
// ======================================================================================================================================

async function findPricelistLink(chatId, cValue) {

    let fileNamePricelist = 'c–ø–∏—Å–æ–∫_–ø—Ä–∞–π—Å–ª–∏—Å—Ç–æ–≤';

    const result = await findExcelFile(fileNamePricelist);
    const filePath = result.fileNamePricelist;

    if (filePath) {

        const user = await UserModel.findOne({
            where: {
              chatId: chatId
            }
        });

        try { 

            const workbook = new ExcelJS.Workbook();
            const stream = fs.createReadStream(filePath);
            const worksheet = await workbook.xlsx.read(stream);
            const firstWorksheet = worksheet.worksheets[0];

            let foundMatchPricelist = false;
            let messagePrice = '';
            let vendor = '';

            firstWorksheet.eachRow((row, rowNumber) => {
                const cellValue = row.getCell('B').value;
                if (cellValue !== null) {

                    const formatedCellValue = cellValue.toString().toUpperCase().replace(/[\s&-]/g, '');
                    const formaterdCValue = cValue.toString().toUpperCase().replace(/[\s&-]/g, '');

                    if (formatedCellValue.includes(formaterdCValue)) {
                        foundMatchPricelist = true;

                        const aValue = row.getCell('A').value;  // –ü–æ—Å—Ç–∞–≤—â–∏–∫
                        let bValue = row.getCell('B').value;  // –ë—Ä–µ–Ω–¥
                        const cValue = row.getCell('C').value;  // –°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–∞–π—Å–ª–∏—Å—Ç
                        const dValue = row.getCell('D').value;  // –ø–æ—á—Ç–æ–≤—ã–π —è—â–∏–∫ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
                        user.update({vendor: aValue.toUpperCase()});
                        vendor = aValue.toUpperCase();
                        if (dValue !== null) {
                        user.update({vendorEmail: dValue.toLowerCase()});
                        }
                        if (isNaN(bValue)) {
                            bValue = bValue.toUpperCase();
                        }

                        if (cValue !== null ) {
                            user.update({brand: bValue});
                            const formattedCValue = cValue.toString().replace(/\\/g, '\\');
                            messagePrice += `–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–∞–ø–∫—É —Å –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–æ–º –±—Ä–µ–Ω–¥–∞ <b>${bValue}</b>:\n<code>${formattedCValue}</code>\n\n`;
                        } else {
                            user.update({brand: bValue});
                            messagePrice += `–Ø –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é –≤ –∫–∞–∫–æ–π –ø–∞–ø–∫–µ –ª–µ–∂–∏—Ç –ø—Ä–∞–π—Å-–ª–∏—Å—Ç –±—Ä–µ–Ω–¥–∞ <b>${bValue}</b>.üò¢\n–ó–∞–ø—Ä–æ—Å–∏—Ç–µ –ø—Ä–∞–π—Å—ã –≤ –æ—Ç–¥–µ–ª–µ –∑–∞–∫—É–ø–æ–∫.\n\n`
                        }
                    }
                }
            });

            if (!foundMatchPricelist) {
                user.update({vendor: null});
                vendor = null;
                messagePrice += `–ü—Ä–∞–π—Å-–ª–∏—Å—Ç –ø–æ –±—Ä–µ–Ω–¥—É <b>${user.brand}</b> –≤ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω.\n–ó–∞–ø—Ä–æ—Å–∏—Ç–µ –ø—Ä–∞–π—Å—ã –≤ –æ—Ç–¥–µ–ª–µ –∑–∞–∫—É–ø–æ–∫.`;
            }

            return {messagePrice, vendor};

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ Excel:', error);
        }
    }
}

// ======================================================================================================================================
// —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤ –ø–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É –î–ï–ö–û–†–î–ï–õ–Æ–ö–°
// ======================================================================================================================================

async function findDecorDelux(chatId) {

    let fileNameDecorDelux = '–æ—Å—Ç–∞—Ç–∫–∏_–¥–µ–∫–æ—Ä_–¥–µ–ª—é–∫—Å';

    const result = await findExcelFile(fileNameDecorDelux);
    const filePath = result.fileNameDecorDelux;


    if (filePath) {

        const user = await UserModel.findOne({
            where: {
                chatId: chatId
            }
        });

        try {

            const workbook = XLSX.readFile(filePath);
            const firstWorksheet = workbook.Sheets[workbook.SheetNames[0]];

            let foundMatch = false;

            for (let cellAddress in firstWorksheet) {
                if (cellAddress[0] === '!') continue;
              
                const cellValue = firstWorksheet[cellAddress].v;

                if (cellValue !== null) {
                    let formatedCellValue = cellValue.toString().trim();
                    const formatedUserVC = user.vendorCode.toString().trim();
              
                    if (isNaN(formatedCellValue)) {
                      formatedCellValue = formatedCellValue.toUpperCase();
                    }

                    if (formatedCellValue.includes(formatedUserVC)) {
                        foundMatch = true;
                    
                        const gValue = firstWorksheet['G' + cellAddress.substring(1)].v; // –ù–æ–º–µ–Ω–∫—É–ª–∞—Ç—É—Ä–∞
                        const hValue = firstWorksheet['H' + cellAddress.substring(1)].v; // –°–µ—Ä–∏—è\–ü–∞—Ä—Ç–∏—è
                        const iCell = firstWorksheet['I' + cellAddress.substring(1)];   // –Ø—á–µ–π–∫–∞: –°–≤–æ–±–æ–¥–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫
                        let iValue = {};
                    
                        if (iCell && iCell.v !== undefined) {
                          iValue = iCell.v; // –°–≤–æ–±–æ–¥–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫
                        } else {
                          iValue = '0';
                        }
                    
                        if (botMsgIdx !== null) {
                          bot.deleteMessage(chatId, botMsgIdx);
                          botMsgIdx = null;
                        }

                        return bot.sendMessage(
                            chatId, 
                            `<strong>${gValue}</strong>\n–ü–∞—Ä—Ç–∏—è: ${hValue}\n${iValue} —à—Ç –≤ —Å–≤–æ–±–æ–¥–Ω–æ–º –æ—Å—Ç–∞—Ç–∫–µ\n<i>–º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ —Å–ª–µ–¥—É—é—â–∏–π –∞—Ä—Ç–∏–∫—É–ª –¥–ª—è –ø–æ–∏—Å–∫–∞</i>`,
                            startFindOptions
                        );
                    }
                }
            }
            
            if (!foundMatch) {
                if (botMsgIdx !== null) {
                    bot.deleteMessage(chatId, botMsgIdx);
                    botMsgIdx = null;
                }
                return bot.sendMessage(
                    chatId,
                    `–°–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º ${user.vendorCode} –≤ —Ñ–∞–π–ª–µ "–æ—Å—Ç–∞—Ç–∫–∏_–¥–µ–∫–æ—Ä_–¥–µ–ª—é–∫—Å" –Ω–µ –Ω–∞–π–¥–µ–Ω–Ω—ã.\n<i>–º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ —Å–ª–µ–¥—É—é—â–∏–π –∞—Ä—Ç–∏–∫—É–ª –¥–ª—è –ø–æ–∏—Å–∫–∞</i>`,
                    { parse_mode: 'HTML' }
                );
            }

        } catch (e) {
            console.log(e);
            if (botMsgIdx !== null) {
                bot.deleteMessage(chatId, botMsgIdx);
                botMsgIdx = null;
            }
            return bot.sendMessage(chatId, `–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ ${filePath}.`);
        }
    }
}

// ======================================================================================================================================
// —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤ –ø–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É –î–ï–ö–û–†–†–£–°
// ======================================================================================================================================

async function findDecorRus(chatId) {

    let fileNameDecorRus = '–æ—Å—Ç–∞—Ç–∫–∏_–¥–µ–∫–æ—Ä_—Ä—É—Å';

    const result = await findExcelFile(fileNameDecorRus);
    const filePath = result.fileNameDecorRus;
    console.log(filePath);
    
    if (filePath) {

        const user = await UserModel.findOne({
            where: {
                chatId: chatId
            }
        });
        
        try { 
            
            const workbook = XLSX.readFile(filePath);
            const firstWorksheet = workbook.Sheets[workbook.SheetNames[0]];

            let foundMatch = false;

            for (let cellAddress in firstWorksheet) {

                if (cellAddress[0] === '!') continue;
        
                const cellValue = firstWorksheet[cellAddress].v;
        
                if (cellValue !== null) {
                    let formatedCellValue = cellValue.toString().trim();
                    const formatedUserVC = user.vendorCode.toString().trim();
        
                    if (isNaN(formatedCellValue)) {
                        formatedCellValue = formatedCellValue.toUpperCase();
                    }
        
                    if (formatedCellValue.includes(formatedUserVC)) {
                        foundMatch = true;
                        
                        const bValue = firstWorksheet['B' + cellAddress.substring(1)].v; // –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã
                        const cCell = firstWorksheet['C' + cellAddress.substring(1)]; // –Ø—á–µ–π–∫–∞: –°–≤–æ–±–æ–¥–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫ –≤ –µ–¥. —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤
                        let cValue = {};
                        
                        if (cCell && cCell.v !== undefined && cCell.v !== null) {
                            cValue = `${cCell.v} –µ–¥.`; // –°–≤–æ–±–æ–¥–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫ –≤ –µ–¥. —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤
                        } else {
                            cValue = '0';
                        }
                        
                        const dCell = firstWorksheet['D' + cellAddress.substring(1)]; // –Ø—á–µ–π–∫–∞: –¶–µ–Ω–∞ (—Ä—É–±.)
                        let dValue = {};
                        
                        if (dCell && dCell.v !== undefined && dCell.v !== null) {
                            dValue = `${dCell.v} —Ä—É–±.`; // –¶–µ–Ω–∞ (—Ä—É–±.)
                        } else {
                            dValue = '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
                        }
                        
                        let message = '';
                        message += `<strong>${bValue}</strong>\n<pre>–°–≤–æ–±–æ–¥–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫:\t${cValue}</pre>\n`;

                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —è—á–µ–π–∫—É –ø–æ—Å–ª–µ bValue –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–±–µ–ª–∞
                        for (let i = parseInt(cellAddress.substring(1)) + 1; ; i++) {
                          const currentBCell = firstWorksheet['B' + i];
                            let currentCCell = firstWorksheet['C' + i];

                            if (currentBCell && currentBCell.v && !currentBCell.v.toString().includes(' ')) {

                                if (currentCCell === undefined || currentCCell === null) {
                                    currentCCell = `0`;
                                }
                                const currentValue = `–ü–∞—Ä—Ç–∏—è: ${currentBCell.v}\t\t${currentCCell.v} –µ–¥.`;
                                message += `<code>${currentValue}</code>\n`;
                            } else {
                              break;
                            }
                        }
                        message += `–¶–µ–Ω–∞: ${dValue}\n<i>–º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ —Å–ª–µ–¥—É—é—â–∏–π –∞—Ä—Ç–∏–∫—É–ª –¥–ª—è –ø–æ–∏—Å–∫–∞</i>\n`;

                        if (botMsgIdx !== null) {
                            bot.deleteMessage(chatId, botMsgIdx);
                            botMsgIdx = null;
                        }
                        
                        return bot.sendMessage(
                          chatId, 
                          message,
                          startFindOptions
                        );
                    }

                }
            };

            if (!foundMatch) {
                if (botMsgIdx !== null) {
                    bot.deleteMessage(chatId, botMsgIdx);
                    botMsgIdx = null;
                };
                return bot.sendMessage(
                    chatId,
                    `–°–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º ${user.vendorCode} –≤ —Ñ–∞–π–ª–µ "–æ—Å—Ç–∞—Ç–∫–∏_–¥–µ–∫–æ—Ä_—Ä—É—Å" –Ω–µ –Ω–∞–π–¥–µ–Ω–Ω—ã.\n<i>–º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ —Å–ª–µ–¥—É—é—â–∏–π –∞—Ä—Ç–∏–∫—É–ª –¥–ª—è –ø–æ–∏—Å–∫–∞</i>`,
                    { parse_mode: 'HTML' }
                );
            }

        } catch (e) {
            console.log(e);
            if (botMsgIdx !== null) {
                bot.deleteMessage(chatId, botMsgIdx);
                botMsgIdx = null;
            }
            return bot.sendMessage(chatId, `–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ ${filePath}.`);
        }    
    }
        
}

// ======================================================================================================================================
// —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤ –ø–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É –ë–ê–£–¢–ï–ö–°
// ======================================================================================================================================

async function findBautex(chatId) {

    let fileNameBautex = '–æ—Å—Ç–∞—Ç–∫–∏_–±–∞—É—Ç–µ–∫—Å';

    const result = await findExcelFile(fileNameBautex);
    const filePath = result.fileNameBautex;
    console.log(filePath);
    
    if (filePath) {

        const user = await UserModel.findOne({
            where: {
              chatId: chatId
            }
        });

        try { 

            const workbook = new ExcelJS.Workbook();
            const stream = fs.createReadStream(filePath);
            const worksheet = await workbook.xlsx.read(stream);
            const firstWorksheet = worksheet.worksheets[0];

            let foundMatch = false;
            
            firstWorksheet.eachRow( async (row, rowNumber) => {
                const cellValue = row.getCell('D').value;
                if (cellValue !== null) {
                    
                    const formatedCellValue = cellValue.toString().toUpperCase().replace(/[\s&-]/g, '');
                    const formatedUserVC = user.vendorCode.toString().toUpperCase().replace(/[\s&-]/g, '');
                    
                    if (formatedCellValue.includes(formatedUserVC)) {
                        foundMatch = true;
                        
                        let message = '';
                        const dValue = row.getCell('D').value;  // –Ω–æ–º–µ–Ω–∫—É–ª–∞—Ç—É—Ä–∞
                        
                        const j8Value = firstWorksheet.getCell('J8').value;  // –°–∫–ª–∞–¥ 1
                        let jValue = row.getCell('J').value;  // –ó–Ω–∞—á–µ–Ω–∏–µ
                        const lValue = row.getCell('L').value;  // –µ–¥. –∏–∑–º–µ—Ä–µ–Ω–∏—è

                        const m8Value = firstWorksheet.getCell('M8').value;  // –°–∫–ª–∞–¥ 2
                        let mValue = row.getCell('M').value;  // –ó–Ω–∞—á–µ–Ω–∏–µ
                        const nValue = row.getCell('N').value;  // –µ–¥. –∏–∑–º–µ—Ä–µ–Ω–∏—è

                        const o8Value = firstWorksheet.getCell('O8').value;  // –°–∫–ª–∞–¥ 3
                        let oValue = row.getCell('O').value;  // –ó–Ω–∞—á–µ–Ω–∏–µ
                        const qValue = row.getCell('Q').value;  // –µ–¥. –∏–∑–º–µ—Ä–µ–Ω–∏—è

                        const r8Value = firstWorksheet.getCell('R8').value;  // –°–∫–ª–∞–¥ 4
                        let rValue = row.getCell('R').value;  // –ó–Ω–∞—á–µ–Ω–∏–µ
                        const sValue = row.getCell('S').value;  // –µ–¥. –∏–∑–º–µ—Ä–µ–Ω–∏—è

                        message += `<b>${dValue}</b>\n\n`;

                        if (jValue !== null && jValue.formula) {
                            jValue = jValue.result;
                            message += `${j8Value}\n${jValue} ${lValue}\n\n`;

                        } else if (jValue !== null) {
                            message += `${j8Value}\n${jValue} ${lValue}\n\n`;
                        }

                        if (mValue !== null && mValue.formula) {
                            mValue = mValue.result;
                            message += `${m8Value}\n${mValue} ${nValue}\n\n`;

                        } else if (mValue !== null) {
                            message += `${m8Value}\n${mValue} ${lValue}\n\n`;
                        }

                        if (oValue !== null && oValue.formula) {
                            oValue = oValue.result;
                            message += `${o8Value}\n${oValue} ${qValue}\n\n`;

                        } else if (oValue !== null) {
                            message += `${o8Value}\n${oValue} ${lValue}\n\n`;
                        }

                        if (rValue !== null && rValue.formula) {
                            rValue = rValue.result;
                            message += `${r8Value}\n${rValue} ${sValue}\n\n`;

                        } else if (rValue !== null) {
                            message += `${r8Value}\n${rValue} ${lValue}\n\n`;
                        }

                        message += `<i>–º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ —Å–ª–µ–¥—É—é—â–∏–π –∞—Ä—Ç–∏–∫—É–ª –¥–ª—è –ø–æ–∏—Å–∫–∞</i>\n\n`;
                        
                        if (botMsgIdx !== null) {
                            bot.deleteMessage(chatId, botMsgIdx);
                            botMsgIdx = null;
                        }
                        await bot.sendMessage(
                            chatId, 
                            message,
                            startFindOptions
                        );
                    }
                }
            });

            if (!foundMatch) {
                if (botMsgIdx !== null) {
                    bot.deleteMessage(chatId, botMsgIdx);
                    botMsgIdx = null;
                }
                return bot.sendMessage(
                    chatId,
                    `–°–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º ${user.vendorCode} –≤ —Ñ–∞–π–ª–µ "–æ—Å—Ç–∞—Ç–∫–∏_–±–∞—É—Ç–µ–∫—Å" –Ω–µ –Ω–∞–π–¥–µ–Ω–Ω—ã.\n<i>–º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ —Å–ª–µ–¥—É—é—â–∏–π –∞—Ä—Ç–∏–∫—É–ª –¥–ª—è –ø–æ–∏—Å–∫–∞</i>`,
                    { parse_mode: 'HTML' }
                );
            }

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ Excel:', error);
        }
    }
}

// ======================================================================================================================================
// —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤ –ø–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É –õ–û–ô–ú–ò–ù–ê
// ======================================================================================================================================

async function findLoymina(chatId) {

    let fileNameLoymina = '–æ—Å—Ç–∞—Ç–∫–∏_–ª–æ–π–º–∏–Ω–∞';

    const result = await findExcelFile(fileNameLoymina);
    const filePath = result.fileNameLoymina;
    console.log(filePath);

    if (filePath) {

        const user = await UserModel.findOne({
            where: {
                chatId: chatId
            }
        });

        try {

            const workbook = XLSX.readFile(filePath);
            const firstWorksheet = workbook.Sheets[workbook.SheetNames[0]];

            let foundMatch = false;

            for (let cellAddress in firstWorksheet) {

                if (cellAddress[0] === '!') continue;
        
                const cellValue = firstWorksheet[cellAddress].v;

                if (cellValue !== null) {
                    let formatedCellValue = cellValue.toString().trim().replace(/[\s\u00A0,]/g, '');
                    const formatedUserVC = user.vendorCode.toString().trim().replace(/[\s\u00A0,]/g, '');
        
                    if (isNaN(formatedCellValue)) {
                        formatedCellValue = formatedCellValue.toUpperCase();
                    }

                    if (formatedCellValue.includes(formatedUserVC)) {
                        foundMatch = true;

                        const dValueCell = firstWorksheet['D' + cellAddress.substring(1)];
                        let dValue = '';
                        const kValueCell = firstWorksheet['K' + cellAddress.substring(1)];
                        let kValue = '';
                        const jValueCell = firstWorksheet['J' + cellAddress.substring(1)];
                        let jValue = '';

                        if (dValueCell !== null && dValueCell !== undefined) {
                            dValue = dValueCell.v;    // –ü–∞—Ä—Ç–∏—è
                        }
                        if (kValueCell !== null && kValueCell !== undefined) {
                            kValue = kValueCell.v     // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
                        }
                        if (jValueCell !== null && jValueCell !== undefined) {
                            jValue = jValueCell.v     // –ï–¥. –∏–∑–º–µ—Ä–µ–Ω–∏—è
                        }

                        let message = '';
                        message += `<b>${dValue}</b>\n`;
                        message += `–í –Ω–∞–ª–∏—á–∏–∏: <b>${kValue}</b> `;
                        message += `<b>${jValue}</b>\n`;
                            
                        if (botMsgIdx !== null) {
                            bot.deleteMessage(chatId, botMsgIdx);
                            botMsgIdx = null;
                        }

                        message += `\n<i>–º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ —Å–ª–µ–¥—É—é—â–∏–π –∞—Ä—Ç–∏–∫—É–ª –¥–ª—è –ø–æ–∏—Å–∫–∞</i>\n`;

                        await bot.sendMessage(
                            chatId, 
                            message,
                            startFind1Options
                        );
                    };
                }
            }

            if (!foundMatch) {
                if (botMsgIdx !== null) {
                    bot.deleteMessage(chatId, botMsgIdx);
                    botMsgIdx = null;
                }
                return bot.sendMessage(
                    chatId,
                    `–°–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º ${user.vendorCode} –≤ —Ñ–∞–π–ª–µ "–æ—Å—Ç–∞—Ç–∫–∏_–ª–æ–π–º–∏–Ω–∞" –Ω–µ –Ω–∞–π–¥–µ–Ω–Ω—ã.\n<i>–º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ —Å–ª–µ–¥—É—é—â–∏–π –∞—Ä—Ç–∏–∫—É–ª –¥–ª—è –ø–æ–∏—Å–∫–∞</i>`,
                    { parse_mode: 'HTML' }
                );
            }

        } catch (e) {
            console.log(e);
            if (botMsgIdx !== null) {
                bot.deleteMessage(chatId, botMsgIdx);
                botMsgIdx = null;
            }
            return bot.sendMessage(
                chatId, 
                `–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ ${filePath}.`
            );
        }
    }
}

// ======================================================================================================================================
// —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤ –ø–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É –°–ò–†–ü–ò
// ======================================================================================================================================

async function findSirpi(chatId) {

    let fileNameSirpi = '–æ—Å—Ç–∞—Ç–∫–∏_—Å–∏—Ä–ø–∏';

    const result = await findExcelFile(fileNameSirpi);
    const filePath = result.fileNameSirpi;
    console.log(filePath);

    if (filePath) {

        const user = await UserModel.findOne({
            where: {
                chatId: chatId
            }
        });

        try {

            const workbook = XLSX.readFile(filePath);
            const firstWorksheet = workbook.Sheets[workbook.SheetNames[0]];

            let foundMatch = false;

            for (let cellAddress in firstWorksheet) {
                
                if (cellAddress[0] === '!') continue;

                const cellValue = firstWorksheet[cellAddress].v;
        
                if (cellValue !== null) {
                    let formatedCellValue = cellValue.toString().trim().replace(/[\s]/g, '');
                    const formatedUserVC = user.vendorCode.toString().trim().replace(/[\s]/g, '');
        
                    if (isNaN(formatedCellValue)) {
                        formatedCellValue = formatedCellValue.toUpperCase();
                    }

                    if (formatedCellValue.includes(formatedUserVC)) {
                        foundMatch = true;
                        let message = '';

                        const aValue = firstWorksheet['A' + cellAddress.substring(1)].v; // –ù–æ–º–µ–Ω–∫—É–ª–∞—Ç—É—Ä–∞
                        message += `<b>${aValue}</b>\n\n`;

                        const cCell = firstWorksheet['C' + cellAddress.substring(1)]; // –î–æ—Å—Ç—É–ø–Ω–æ
                        if (cCell && cCell.v !== null && cCell.v !== undefined) {
                            message += `–î–æ—Å—Ç—É–ø–Ω–æ —Å–µ–π—á–∞—Å: ${cCell.v}\n`
                        }

                        const d1Value = firstWorksheet['D1'].v; // –î–∞—Ç–∞ –ø–æ—Å—Ç–∞–≤–∫–∏ 1
                        const dCell = firstWorksheet['D' + cellAddress.substring(1)]; // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –ø–æ—Å—Ç–∞–≤–∫–µ 1
                        if (dCell && dCell.v !== null && dCell.v !== undefined) {
                            message += `–î–∞—Ç–∞ —Å–ª–µ–¥. –ø–æ—Å—Ç–∞–≤–∫–∏:\n${d1Value}\n\n–ë—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ ${dCell.v}\n`
                        }

                        let e1Value = firstWorksheet['E1'].v; // –î–∞—Ç–∞ –ø–æ—Å—Ç–∞–≤–∫–∏ 2
                        const eCell = firstWorksheet['E' + cellAddress.substring(1)]; // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –ø–æ—Å—Ç–∞–≤–∫–µ 2
                        if (eCell && eCell.v !== null && eCell.v !== undefined) {
                            message += `–î–∞—Ç–∞ —Å–ª–µ–¥. –ø–æ—Å—Ç–∞–≤–∫–∏:\n${e1Value}\n–ë—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ ${eCell.v}\n`
                        }

                        const f1Value = firstWorksheet['F1'].v; // –î–∞—Ç–∞ –ø–æ—Å—Ç–∞–≤–∫–∏ 2
                        const fCell = firstWorksheet['F' + cellAddress.substring(1)]; // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –ø–æ—Å—Ç–∞–≤–∫–µ 3
                        if (fCell && fCell.v !== null && fCell.v !== undefined) {
                            message += `–î–∞—Ç–∞ —Å–ª–µ–¥. –ø–æ—Å—Ç–∞–≤–∫–∏:\n${f1Value}\n–ë—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ ${fCell.v}\n`
                        }

                        if (botMsgIdx !== null) {
                            bot.deleteMessage(chatId, botMsgIdx);
                            botMsgIdx = null;
                        }
                        return bot.sendMessage(
                            chatId, 
                            message,
                            startFindOptions
                        );
                        
                    }
                }
            }

        if (!foundMatch) {
            if (botMsgIdx !== null) {
                bot.deleteMessage(chatId, botMsgIdx);
                botMsgIdx = null;
            }
            return bot.sendMessage(
                chatId,
                `–°–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º ${user.vendorCode} –≤ —Ñ–∞–π–ª–µ "–æ—Å—Ç–∞—Ç–∫–∏_—Å–∏—Ä–ø–∏" –Ω–µ –Ω–∞–π–¥–µ–Ω–Ω—ã.\n<i>–º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ —Å–ª–µ–¥—É—é—â–∏–π –∞—Ä—Ç–∏–∫—É–ª –¥–ª—è –ø–æ–∏—Å–∫–∞</i>`,
                { parse_mode: 'HTML' }
            );
        }

        } catch (e) {
            console.log(e);
            if (botMsgIdx !== null) {
                bot.deleteMessage(chatId, botMsgIdx);
                botMsgIdx = null;
            }
            return bot.sendMessage(chatId, `–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ ${filePath}.`);
        }
    }
}

// ======================================================================================================================================
// —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤ –ø–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É BRINK
// ======================================================================================================================================


async function findBrink(chatId) {

    let fileNameBrink = '–æ—Å—Ç–∞—Ç–∫–∏_brink&campman';

    const result = await findExcelFile(fileNameBrink);
    const filePath = result.fileNameBrink;

    if (filePath) {

        const user = await UserModel.findOne({
            where: {
                chatId: chatId
            }
        });

        try {

            const workbook = XLSX.readFile(filePath);
            const firstWorksheet = workbook.Sheets[workbook.SheetNames[0]];

            let foundMatch = false;
            let message = '';

            for (let cellAddress in firstWorksheet) {
                
                if (cellAddress[0] === '!') continue;

                const cellValue = firstWorksheet[cellAddress].v;
        
                if (cellValue !== null) {
                    let formatedCellValue = cellValue.toString().trim().replace(/[\s]/g, '');
                    const formatedUserVC = user.vendorCode.toString().trim().replace(/[\s]/g, '');
        
                    if (isNaN(formatedCellValue)) {
                        formatedCellValue = formatedCellValue.toUpperCase();
                    }

                    if (formatedCellValue.includes(formatedUserVC)) {
                        foundMatch = true;

                        message = '';

                        const bValue = firstWorksheet['B' + cellAddress.substring(1)].v;    // –ù–æ–º–µ–Ω–∫—É–ª–∞—Ç—É—Ä–∞
                        const cCell = firstWorksheet['C' + cellAddress.substring(1)];   // –Ø—á–µ–π–∫–∞ EAN —à—Ç—Ä–∏—Ö–∫–æ–¥–∞ 
                            let cValue = {};    // EAN —à—Ç—Ä–∏—Ö–∫–æ–¥ 

                            if (cCell && cCell.v !== undefined) {
                                cValue = cCell.v.toString();    // EAN —à—Ç—Ä–∏—Ö–∫–æ–¥ 
                            } else {
                                cValue = '–Ω–µ—Ç';
                            }

                        const fValue = firstWorksheet['F' + cellAddress.substring(1)].v;    // –°–≤–æ–±–æ–¥–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫ –≤ –Ω–∞–ª–∏—á–∏–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ
                        let fDate = firstWorksheet['F1'].v.split(" ")[3];   // –î–∞—Ç–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –æ—Å—Ç–∞—Ç–∫–∞

                            if ( !isNaN(fDate) ) {
                                const year = fDate.substring(0, 4);
                                const month = fDate.substring(4, 6);
                                const day = fDate.substring(6, 8);
                                fDate = `${day}.${month}.${year}`;
                            }

                        message += `–û—Å—Ç–∞—Ç–æ–∫ <b>${bValue}</b> –Ω–∞ <b>${fDate}</b>:\nEAN: ${cValue}\n\n–°–≤–æ–±–æ–¥–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫ –Ω–∞ —Å–∫–ª–∞–¥–µ: ${fValue}\n\n`;
                        
                        message += `<i>–º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ —Å–ª–µ–¥—É—é—â–∏–π –∞—Ä—Ç–∏–∫—É–ª –¥–ª—è –ø–æ–∏—Å–∫–∞</i>`
                        
                        if (botMsgIdx !== null) {
                            bot.deleteMessage(chatId, botMsgIdx);
                            botMsgIdx = null;
                        }

                        await bot.sendMessage(
                            chatId, 
                            message,
                            startFind1Options
                        );
                    }
                }
            }

        if (!foundMatch) {
            if (botMsgIdx !== null) {
                bot.deleteMessage(chatId, botMsgIdx);
                botMsgIdx = null;
            }
            return bot.sendMessage(
                chatId,
                `–°–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º ${user.vendorCode} –≤ —Ñ–∞–π–ª–µ "–æ—Å—Ç–∞—Ç–∫–∏_brink&campman" –Ω–µ –Ω–∞–π–¥–µ–Ω–Ω—ã.\n<i>–º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ —Å–ª–µ–¥—É—é—â–∏–π –∞—Ä—Ç–∏–∫—É–ª –¥–ª—è –ø–æ–∏—Å–∫–∞</i>`,
                { parse_mode: 'HTML' }
            );
        }

        } catch (e) {
            console.log(e);
            if (botMsgIdx !== null) {
                bot.deleteMessage(chatId, botMsgIdx);
                botMsgIdx = null;
            }
            return bot.sendMessage(chatId, `–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ ${filePath}.`);
        }
    }
}

async function findLittleGreenePPL(chatId) {

    let fileNameLg = '–æ—Å—Ç–∞—Ç–∫–∏_lg_ppl_wallpaper';

    const result = await findExcelFile(fileNameLg);
    const filePath = result.fileNameLg;

    if (filePath) {

        const user = await UserModel.findOne({
            where: {
                chatId: chatId
            }
        });

        try {

            const workbook = XLSX.readFile(filePath);
            const firstWorksheet = workbook.Sheets[workbook.SheetNames[0]];

            let foundMatch = false;
            let message = '';

            for (let cellAddress in firstWorksheet) {

                if (cellAddress[0] === '!') continue;

                const cellValue = firstWorksheet[cellAddress].v;
        
                if (cellValue !== null) {
                    let formatedCellValue = cellValue.toString().trim().replace(/[\s]/g, '');
                    const formatedUserVC = user.vendorCode.toString().trim().replace(/[\s]/g, '');
        
                    if (isNaN(formatedCellValue)) {
                        formatedCellValue = formatedCellValue.toUpperCase();
                    }

                    if (formatedCellValue.includes(formatedUserVC)) {
                        foundMatch = true;

                        const aCell = firstWorksheet['A' + cellAddress.substring(1)];    // –ê—Ä—Ç–∏–∫—É–ª
                        let aValue = {};
                        const bCell = firstWorksheet['B' + cellAddress.substring(1)];    // –ù–æ–º–µ–Ω–∫—É–ª–∞—Ç—É—Ä–∞
                        let bValue = {};
                        const cCell = firstWorksheet['C' + cellAddress.substring(1)];   // –ö–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ 
                        let cValue = {};

                            if (aCell && aCell.v !== undefined) {
                                aValue = aCell.v.toString();    
                            } else {
                                aValue = '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
                            }

                            if (bCell && bCell.v !== undefined) {
                                bValue = bCell.v.toString();    
                            } else {
                                bValue = '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
                            }

                            if (cCell && cCell.v !== undefined) {
                                cValue = cCell.v.toString();    
                            } else {
                                cValue = '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
                            }

                        message = `<b>${bValue}</b>\n–ê—Ä—Ç–∏–∫—É–ª: ${aValue}\n–û—Å—Ç–∞—Ç–æ–∫: ${cValue} —Ä—É–ª.\n\n<i>–º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ —Å–ª–µ–¥—É—é—â–∏–π –∞—Ä—Ç–∏–∫—É–ª/–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞</i>`

                        if (botMsgIdx !== null) {
                            bot.deleteMessage(chatId, botMsgIdx);
                            botMsgIdx = null;
                        }

                        return bot.sendMessage(
                            chatId, 
                            message,
                            startFind1Options
                        );
                    }
                }
            }

            if (!foundMatch) {
                if (botMsgIdx !== null) {
                    bot.deleteMessage(chatId, botMsgIdx);
                    botMsgIdx = null;
                }
                return bot.sendMessage(
                    chatId,
                    `–°–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å ${user.vendorCode} –≤ —Ñ–∞–π–ª–µ "–æ—Å—Ç–∞—Ç–∫–∏_lg_ppl_wallpaper" –Ω–µ –Ω–∞–π–¥–µ–Ω–Ω—ã.\n<i>–º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ —Å–ª–µ–¥—É—é—â–∏–π –∞—Ä—Ç–∏–∫—É–ª –¥–ª—è –ø–æ–∏—Å–∫–∞</i>`,
                    { parse_mode: 'HTML' }
                );
            }

        } catch (e) {
            console.log(e);
            if (botMsgIdx !== null) {
                bot.deleteMessage(chatId, botMsgIdx);
                botMsgIdx = null;
            }
            return bot.sendMessage(chatId, `–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ ${filePath}.`);
        }
    }
}

// ======================================================================================================================================
// —Å—Ç–∞—Ä—Ç —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã =================================================================================================================
// ======================================================================================================================================

const start = async () => {

    console.log('–ë–æ—Ç –∑–∞–ø—â—É–µ–Ω...')

    try {
        await sequelize.authenticate();
        await sequelize.sync();
        console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ');
    } catch(err) {
        console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å–ª–æ–º–∞–ª–æ—Å—å', err);
    }

    // –∫–æ–º–∞–Ω–¥—ã======================================================================================

    //—Å—Ç–∞—Ä—Ç
    bot.onText(/\/start/, async msg => {
        const chatId = msg.chat.id;
        var user = null;

        try {

            user = await UserModel.findOne({
                where: {
                    chatId: chatId
                }
            });

            if (user) {

                if (user.email !== '/passwordcheck') {

                    // lc = null
                    await user.update({lastCommand: null}, {
                        where: {
                            chatId: chatId
                        }
                    })
                
                    return bot.sendMessage(
                        chatId, 
                        `–¢—ã ${user.firstName}, –Ø - –ó–∞–∫, –º—ã —É–∂–µ –∑–Ω–∞–∫–æ–º—ã üòÖ`
                    );
                }

            } else {

                await createNewUser(chatId, msg);

                return bot.sendMessage(
                    chatId, 
                    `–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:`
                );
            }
        
        } catch (e) {
            console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', e);
        }

    });

    // –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É
    bot.onText(/\/game/, async msg => {
        const chatId = msg.chat.id;

        const user = await UserModel.findOne({
            where: {
                chatId: chatId
            },
            attributes: ['id', 'chatId', 'lastCommand', 'email']
        });

        if (user.email !== '/passwordcheck') {

            // lc = '/game';
            await user.update({lastCommand: '/game'}, {
                where: {
                    chatId: chatId
                }
            })

            const randomNumber = Math.floor(Math.random() * 10)
            chats[chatId] = randomNumber;
            return bot.sendMessage(
                chatId, 
                `–û—Ç–≥–∞–¥–∞–π —á–∏—Å–ª–æüòè`, 
                gameOptions
            );
        }
    });

    // –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    bot.onText(/\/x/, async msg => {
        const chatId = msg.chat.id;

        // lc = null; 
        const user = await UserModel.findOne({
            where: {
                chatId: chatId
            },
            attributes: [
                'id', 
                'chatId', 
                'lastCommand',
                'vendorCode'
            ]
        });

        await user.update({lastCommand: null}, {
            where: {
                chatId: chatId
            }
        })

        try {

            const vendorCode = `FDG3114/03`
            const formatedVendorCode = vendorCode.replace(/\//g, '%2F');
            const responseLink = `https://www.designersguild.com/nl/search-results/l76?search-term=${formatedVendorCode}&pagesize=48&sort=default&page=1`;
            console.log(responseLink);

            const responseDG = await axios.get(
                responseLink, 
                {
                    proxy: false,
                    httpsAgent: agent,
                }
            );

            const $ = cheerio.load(responseDG.data);
            
            console.log(responseDG.data);



        } catch (e) {
            
            console.log( '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫', e);
        }

    });

    // –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    bot.onText(/\/settings/, async msg => {
        const chatId = msg.chat.id;

        const user = await UserModel.findOne({
            where: {
                chatId: chatId
            },
            attributes: [
                'id', 
                'chatId', 
                'lastCommand', 
                'email'
            ]
        });

        if (user.email !== '/passwordcheck') {

            // lc = null; 
            await user.update({
                lastCommand: null
            }, {
                where: {
                    chatId: chatId
                }
            })
        
            return bot.sendMessage(
                chatId, 
                `–ù–∞—Å—Ç—Ä–æ–π–∫–∏:`, 
                settingsOptions
            );
        }
    });

    // –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ 
    bot.onText(/\/files/, async msg => {
        const chatId = msg.chat.id;
        const folderPath = '/root/zak/xl';
        // const folderPath = 'C:\\node.js\\zak\\xl';   //Dev

        const user = await UserModel.findOne({
            where: {
                chatId: chatId
            },
            attributes: ['id', 'chatId', 'lastCommand', 'email']
        });

        if (user.email !== '/passwordcheck') {

            // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ
            fs.readdir(folderPath, async (err, files) => {
                if (err) {
                    console.log(err);
                    return bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤.');
                }
            
                // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
                await bot.sendMessage(chatId, '–°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤:');
                files.forEach((file) => {
                    return bot.sendMessage(chatId, `<code>${file}</code>`, { parse_mode: 'HTML' } );
                });
            });
        }
    });

    // –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    bot.onText(/\/getfile (.+)/, async (msg, match) => {
        const chatId = msg.chat.id;

        const user = await UserModel.findOne({
            where: {
                chatId: chatId
            },
            attributes: ['id', 'chatId', 'lastCommand', 'email']
        });

        if (user.email !== '/passwordcheck') {

            const fileName = match[1];
            const filePath = path.join('/root/zak/xl', fileName); 
            // const filePath = path.join('C:\\node.js\\zak\\xl', fileName);    //Dev

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
            fs.access(filePath, fs.constants.F_OK, (err) => {
                if (err) {
                    return bot.sendMessage(chatId, '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.');
                }
            
                // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞
                bot.sendDocument(chatId, filePath);
            })
        }
    });

    // –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    bot.onText(/\/get (.+)/, async (msg, match) => {
        const chatId = msg.chat.id;

        const user = await UserModel.findOne({
            where: {
                chatId: chatId
            },
            attributes: ['id', 'chatId', 'lastCommand', 'email']
        });

        if (user.email !== '/passwordcheck') {

            const fileName = match[1];
            const filePath = path.join('/root/zak/', fileName);

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
            fs.access(filePath, fs.constants.F_OK, (err) => {
                if (err) {
                    return bot.sendMessage(chatId, '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.');
                }
            
                // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞
                bot.sendDocument(chatId, filePath);
            })
        }
    });

    // –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    bot.onText(/\/whoiswho/, async (msg) => {
        const chatId = msg.chat.id;

        const user = await UserModel.findOne({
            where: {
                chatId: chatId
            },
            attributes: ['id', 'chatId', 'lastCommand', 'email']
        });

        if (user.email !== '/passwordcheck') {

            UserModel.findAll().then((users) => {

                users.forEach((user) => {
                    
                    const message = `ID: <code>${user.chatId}</code>\nUser: <code>${user.firstName} ${user.lastName}</code>\nEmail: <code>${user.email}</code>`;
                    
                    bot.sendMessage(msg.chat.id,
                        message,
                        { parse_mode: 'HTML' }
                    );
                });
            }).catch((error) => {
              console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.:', error);
            });
        }
    });

    // –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    bot.onText(/\/whois (.+)/, async (msg, match) => {
        const chatId = msg.chat.id;
        
        const userId = msg.text.split(" ")[1];
        const user = await UserModel.findOne({
            where: {
                chatId: userId
            },
            attributes: 
            [
                'id', 
                'chatId',
                'firstName', 
                'lastName', 
                'lastCommand', 
                'email'
            ]
        });

        if ( user ) {

            const message = `ID: <code>${user.chatId}</code>\nUser: <code>${user.firstName} ${user.lastName}</code>\nEmail: <code>${user.email}</code>`;
            return bot.sendMessage(msg.chat.id,
                message,
                { parse_mode: 'HTML' }
            );

        } else {
           
            return bot.sendMessage(msg.chat.id,
                `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º id –Ω–µ –Ω–∞–π–¥–µ–Ω.`,
                { parse_mode: 'HTML' }
            );

        }
        
    });

    // –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    bot.onText(/\/abilitys/, (msg) => {
        const chatId = msg.chat.id;

    bot.sendMessage(chatId,
    `<b>–ß—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç —Å–µ–π—á–∞—Å:</b>

    –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å –ø–æ–∏—Å–∫ üîé –æ—Å—Ç–∞—Ç–∫–æ–≤ –Ω–∞ —Å–∞–π—Ç–∞—Ö:
    <strong>opusdeco.ru</strong>
        ‚úÖ<code>1838</code>
        ‚úÖ<code>Arlin</code>
        ‚úÖ<code>Arthouse</code>
        ‚úÖ<code>Atelier</code>
        ‚úÖ<code>Aura</code>
        ‚úÖ<code>Lincrusta</code>
        ‚úÖ<code>Print 4</code>
        ‚úÖ<code>Sangiorgio</code>
        ‚úÖ<code>Sem - Murale</code>
        ‚úÖ<code>Ultra Wood</code>
        ‚úÖ<code>York</code>

    <strong>dealer.decaro.ru</strong> 
        ‚úÖ<code>Architector</code>
        ‚úÖ<code>Casa Mia</code>
        ‚úÖ<code>Coordonne</code>
        ‚úÖ<code>Emil & Hugo</code>
        ‚úÖ<code>Epoca</code>
        ‚úÖ<code>Etten</code>
        ‚úÖ<code>Heritage House</code>
        ‚úÖ<code>Jaima Brown</code>
        ‚úÖ<code>KT-Exclusive</code>
        ‚úÖ<code>Mayflower</code>
        ‚úÖ<code>NLXL</code>
        ‚úÖ<code>Paper & Ink</code>
        ‚úÖ<code>Seabrook</code>
        ‚úÖ<code>Texam</code>
        ‚úÖ<code>Tiffany Design</code>
        ‚úÖ<code>Trendsetter</code>
        ‚úÖ<code>Vatos</code>
        ‚úÖ<code>Wallquest</code>

    <strong>galleriaarben.ru</strong>
        ‚úÖ<code>Galleria Arben</code>

    <strong>designersguild.com</strong>
        ‚úÖ<code>Designers Guild</code>

    <b>–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å –ø–æ–∏—Å–∫ üîé –ø–æ —Ñ–∞–π–ª–∞–º –æ—Å—Ç–∞—Ç–∫–æ–≤ —Å–ª–µ–¥—É—é—â–∏—Ö –±—Ä–µ–Ω–¥–æ–≤:</b>
        ‚úÖ<code>Architects Papers</code>
        ‚úÖ<code>ARTE</code>
        ‚úÖ<code>Bautex</code>
        ‚úÖ<code>Bluebellgray</code>
        ‚úÖ<code>BN International</code>
        ‚úÖ<code>Brink</code>
        ‚úÖ<code>Collins & Company</code>
        ‚úÖ<code>Eijffinger</code>
        ‚úÖ<code>Holden</code>
        ‚úÖ<code>Hookedonwalls</code>
        ‚úÖ<code>Jannelli & Volpi</code>
        ‚úÖ<code>Khroma Zoom</code>
        ‚úÖ<code>Loymina</code>
        ‚úÖ<code>Milassa</code>
        ‚úÖ<code>Missoni</code>
        ‚úÖ<code>Nina Hancock</code>
        ‚úÖ<code>ORAC</code>
        ‚úÖ<code>Swiss Lake</code>
        ‚úÖ<code>Ted Beker</code>
        ‚úÖ<code>Wedgwood</code>
        ‚úÖ<code>Little Greene</code> <code>(–æ–±–æ–∏)</code>
        ‚úÖ<code>Paint Paper Library</code> <code>(–æ–±–æ–∏)</code>   

    <b>–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –µ–º–µ–π–ª—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫—É</b> üì®
    <b>–ü–æ–¥—Å–∫–∞–∑—ã–≤–∞—Ç—å –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –ø—Ä–∞–π—Å–ª–∏—Å—Ç–∞–º–∏</b> üëì
    <b>–ò—Å–∫–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥–∏ –æ–±–æ–µ–≤ –∏ —Ç–µ–∫—Å—Ç–∏–ª—è</b> üîé
    <b>–ò—Å–∫–∞—Ç—å –æ—Å—Ç–∞—Ç–∫–∏ –≤ 1–°*</b> ‚úÖ
    `,
            { parse_mode: 'HTML' }
        );
    });

    // –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    bot.onText(/\/updatelist/, (msg) => {
        const chatId = msg.chat.id;

    bot.sendMessage(chatId,
    `<b>–í–µ—Ä—Å–∏—è 1.1.0.0
    –ß—Ç–æ –Ω–æ–≤–æ–≥–æ:</b>

    –¢–µ–ø–µ—Ä—å –±–æ—Ç –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ –ø–æ 1–°
    ------------------------------------
    <b>–í–µ—Ä—Å–∏—è 1.1.0.0
    –ß—Ç–æ –Ω–æ–≤–æ–≥–æ:</b>

    –î–æ–±–∞–≤–ª–µ–Ω –ø–æ–∏—Å–∫ –æ—Å—Ç–∞—Ç–∫–æ–≤ –Ω–∞ —Å–∞–π—Ç–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ Designers Guld.
    ------------------------------------
    <b>–í–µ—Ä—Å–∏—è 1.0.9.0
    –ß—Ç–æ –Ω–æ–≤–æ–≥–æ:</b>

    –î–æ–±–∞–≤–ª–µ–Ω –ø–æ–∏—Å–∫ –æ—Å—Ç–∞—Ç–∫–æ–≤ –Ω–∞ —Å–∞–π—Ç–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ ULTRA WOOD.
    –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ —Å–ø–∏—Å–æ–∫ –≤—ã–∑—ã–≤–∞–µ–º—ã–π –ø–æ –∫–æ–º–∞–Ω–¥–µ /abilitys,
    —Ç–µ–ø–µ—Ä—å –Ω–∞ —Å–º–∞—Ä—Ç—Ñ–æ–Ω–∞—Ö —Å–ø–∏—Å–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.

    `,
            { parse_mode: 'HTML' }
        );
    });

    //—Å–ª—É—à–∞—Ç–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏–π==========================================================================================

    bot.on('message', async msg => {
        let text = msg.text;
        const chatId = msg.chat.id;

        console.log(msg)

        const user = await UserModel.findOne({
            where: {
                chatId: chatId
            }
        });

        try {

            if (user) {

                if (msg.document) {
                    let file_name = msg.document.file_name;

                    if (file_name === 'config.cfg') {

                        let fileName = `config.cfg`;

                        await bot.getFile(msg.document.file_id).then((file) => {
                            const fileStream = bot.getFileStream(file.file_id);
                            fileStream.pipe(fs.createWriteStream(`/root/zak/${fileName}`));
                            fileStream.on('end', () => {
                                bot.sendMessage(
                                    chatId, 
                                    `–§–∞–π–ª <b>${fileName}</b>\n—É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.`, 
                                    { parse_mode: 'HTML' }
                                );
                            });
                        });
                        return;

                    } else if (file_name.toLowerCase().includes('–∫–∞—Ç–∞–ª–æ–≥–∏') ||
                        file_name.toLowerCase().includes('–ø—Ä–∞–π—Å–ª–∏—Å—Ç–æ–≤')
                    ) {

                        let fileName = {};
                        if (file_name.toLowerCase().includes('26') && 
                            file_name.toLowerCase().includes('–∫–∞—Ç–∞–ª–æ–≥–∏')
                            ) {
                            fileName = `–∫–∞—Ç–∞–ª–æ–≥–∏_—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ_–≤_—Å–∞–ª–æ–Ω—ã_26_09_19.xlsx`;
                        }

                        if (file_name.toLowerCase().includes('—Ç–µ–∫—Å—Ç–∏–ª—å') &&
                            file_name.toLowerCase().includes('–∫–∞—Ç–∞–ª–æ–≥–∏')
                            ) {
                            fileName = `—Ç–µ–∫—Å—Ç–∏–ª—å_–∫–∞—Ç–∞–ª–æ–≥–∏_—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ_–≤_—Å–∞–ª–æ–Ω—ã.xlsx`;
                        }

                        if (file_name.toLowerCase().includes('–ø—Ä–∞–π—Å–ª–∏—Å—Ç–æ–≤')) {
                            fileName = `—Å–ø–∏—Å–æ–∫_–ø—Ä–∞–π—Å–ª–∏—Å—Ç–æ–≤.xlsx`;
                        }

                        await bot.getFile(msg.document.file_id).then((file) => {
                            const fileStream = bot.getFileStream(file.file_id);
                            fileStream.pipe(fs.createWriteStream(`/root/zak/xl/${fileName}`)); 
                            // fileStream.pipe(fs.createWriteStream(`C:\\node.js\\zak\\xl\\${fileName}`));  //Dev
                            fileStream.on('end', () => {
                                bot.sendMessage(
                                    chatId, 
                                    `–§–∞–π–ª <b>${fileName}</b>\n—É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.`, 
                                    { parse_mode: 'HTML' }
                                );
                            });
                        });
                        return;
                        
                    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –æ—Å—Ç–∞—Ç–∫–æ–≤. –û–±—Ä–µ–∑–∫–∞ –¥–∞—Ç, –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä, –∑–∞–º–µ–Ω–∞ –ø—Ä–æ–±–µ–ª–æ–≤ –Ω–∞ "_"
                    } else if (
                        file_name.toLowerCase().includes('orac') || 
                        file_name.toLowerCase().includes('brink') ||
                        file_name.toLowerCase().includes('–æ—Ä–∞–∫') ||
                        file_name.toLowerCase().includes('–¥–µ–ª—é–∫—Å') ||
                        file_name.toLowerCase().includes('—Ä—É—Å') ||
                        file_name.toLowerCase().includes('–±–∞—É—Ç–µ–∫—Å') ||
                        file_name.toLowerCase().includes('–ª–æ–π–º–∏–Ω–∞') ||
                        file_name.toLowerCase().includes('—Å–∏—Ä–ø–∏') ||
                        file_name.toLowerCase().includes('delux') ||
                        file_name.toLowerCase().includes('rus') ||
                        file_name.toLowerCase().includes('bautex') || 
                        file_name.toLowerCase().includes('lg') || 
                        file_name.toLowerCase().includes('loymina') ||
                        file_name.toLowerCase().includes('sirpi') ||
                        file_name.toLowerCase().includes('campman') 
                    ) {

                        let fileName = {};
                        file_name = file_name.replace(/\s\d+|\.\d+/g, '');  // —É–¥–∞–ª–µ–Ω–∏–µ –¥–∞—Ç
                        let file_format = file_name.split(".")[1];  // –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ —Ñ–∞–π–ª–∞

                        if (
                            (file_name.toLowerCase().includes('orac') || 
                            file_name.toLowerCase().includes('–æ—Ä–∞–∫')) &&
                            (file_name.toLowerCase().includes('msk') || 
                            file_name.toLowerCase().includes('–º—Å–∫')) 
                        ) {
                            fileName = `orac_–º—Å–∫.${file_format}`;

                        } else if ( 
                            (file_name.toLowerCase().includes('orac') || 
                            file_name.toLowerCase().includes('–æ—Ä–∞–∫')) &&
                            (file_name.toLowerCase().includes('spb') || 
                            file_name.toLowerCase().includes('—Å–ø–±')) 
                        ) {
                            fileName = `orac_—Å–ø–±.${file_format}`;

                        } else if ( 
                            (file_name.toLowerCase().includes('decor') || 
                                file_name.toLowerCase().includes('–¥–µ–∫–æ—Ä')) &&
                                (file_name.toLowerCase().includes('delux') || 
                                file_name.toLowerCase().includes('–¥–µ–ª—é–∫—Å')) 
                        ) {
                            fileName = `–æ—Å—Ç–∞—Ç–∫–∏_–¥–µ–∫–æ—Ä_–¥–µ–ª—é–∫—Å.${file_format}`;

                        } else if ( 
                            (file_name.toLowerCase().includes('–¥–µ–∫–æ—Ä') || 
                            file_name.toLowerCase().includes('decor')) &&
                            (file_name.toLowerCase().includes('—Ä—É—Å') || 
                            file_name.toLowerCase().includes('rus')) 
                        ) {
                            fileName = `–æ—Å—Ç–∞—Ç–∫–∏_–¥–µ–∫–æ—Ä_—Ä—É—Å.${file_format}`;

                        } else if (
                            file_name.toLowerCase().includes( '–±–∞—É—Ç–µ–∫—Å' ) || 
                            file_name.toLowerCase().includes( 'bautex' ) 
                        ) {
                            fileName = `–æ—Å—Ç–∞—Ç–∫–∏_–±–∞—É—Ç–µ–∫—Å.${file_format}`;
                        } else if (
                            file_name.toLowerCase().includes( '–ª–æ–π–º–∏–Ω–∞' ) || 
                            file_name.toLowerCase().includes( 'loymina' ) 
                        ) {
                                fileName = `–æ—Å—Ç–∞—Ç–∫–∏_–ª–æ–π–º–∏–Ω–∞.${file_format}`;

                        } else if (
                            file_name.toLowerCase().includes( 'brink' ) || 
                            file_name.toLowerCase().includes( 'campman' ) 
                        ) {
                            fileName = `–æ—Å—Ç–∞—Ç–∫–∏_brink&campman.${file_format}`;

                        } else if (
                            file_name.toLowerCase().includes( 'sirpi' ) || 
                            file_name.toLowerCase().includes( '—Å–∏—Ä–ø–∏' ) 
                        ) {
                            fileName = `–æ—Å—Ç–∞—Ç–∫–∏_—Å–∏—Ä–ø–∏.${file_format}`;

                        } else if (
                            file_name.toLowerCase().includes( 'lg' )
                        ) {
                            fileName = `–æ—Å—Ç–∞—Ç–∫–∏_lg_ppl_wallpaper.${file_format}`;
                        
                        }

                        await bot.getFile(msg.document.file_id).then((file) => {
                            
                            const fileStream = bot.getFileStream(file.file_id);
                            fileStream.pipe(fs.createWriteStream(`/root/zak/xl/${fileName}`));
                            // fileStream.pipe(fs.createWriteStream(`C:\\node.js\\zak\\xl\\${fileName}`));  //Dev
                            fileStream.on('end', () => {
                                bot.sendMessage(
                                    chatId, 
                                    `–§–∞–π–ª <b>${fileName}</b>\n—É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.`, 
                                    { parse_mode: 'HTML' }
                                );
                            });
                        });
                        return;

                    } else {
                        
                        return bot.sendMessage(
                            chatId, 
                            `–í —Ü–µ–ª—è—Ö —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏, —è —Å–æ—Ö—Ä–∞–Ω—è—é –ª–∏—à—å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ —ç–∫—Å–µ–ª—å —Ñ–∞–π–ª—ã\n–ï—Å–ª–∏ –∂–µ–ª–∞–µ—Ç–µ, —á—Ç–æ–±—ã —è –Ω–∞—É—á–∏–ª—Å—è —Ä–∞–±–æ—Ç–∞—Ç—å —Å –≤–∞—à–∏–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–º, —Ç–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–æ–µ–º—É —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É\nn_kharitonov@manders.ru`
                        );
                    }

                } else if (user.email === '/passwordcheck') {

                    return chekPassword(chatId, msg);

                } else if (text === '/mainmenu') {

                    // lc = null;
                    await user.update({lastCommand: text}, {
                        where: {
                            chatId: chatId
                        }
                    })

                    return bot.sendMessage(
                        chatId, 
                        `–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é, ${user.nickname}\n–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π id: <code>${chatId}</code>`,
                        mainMenuOptions
                    ); 

                } else if (
                    user.lastCommand === '/editEmail' &&
                    !ignoreCommands.includes(text)
                    ) {

                    await user.update({
                        email: text.toLowerCase(),
                        lastCommand: null
                    });

                    return bot.sendMessage(
                        chatId, 
                        `–í–∞—à email "<b>${user.email}</b>" —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.`, 
                        mainMenuReturnOptions
                    );

                } else if (
                    user.lastCommand === '/editNickname' &&
                    !ignoreCommands.includes(text)
                    ) {

                    await user.update({nickname: text, lastCommand: null});
                    return bot.sendMessage(
                        chatId, 
                        `–¢–µ–ø–µ—Ä—å —è –±—É–¥—É –Ω–∞–∑—ã–≤–∞—Ç—å –≤–∞—Å "<b>${user.nickname}</b>".`, 
                        mainMenuReturnOptions
                    );

                } else if (
                    user.lastCommand === '/enterBrand' &&
                    !ignoreCommands.includes(text)
                ) {

                    await user.update({brand: text.toUpperCase()});

                    let cValue = text;
                    let PricelistLink = await findPricelistLink(chatId, cValue);

                    if (text.length < 4) {

                        if (botMsgIdx !== null) {
                            bot.deleteMessage(chatId, botMsgIdx);
                            botMsgIdx = null;
                        }

                        return bot.sendMessage(
                            chatId,
                            `–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∏—Å–∫–æ–º–æ–≥–æ –±—Ä–µ–Ω–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–æ—Ä–æ—á–µ 4—Ö —Å–∏–º–≤–æ–ª–æ–≤\n–≤–≤–µ–¥–∏—Ç–µ –±—Ä–µ–Ω–¥ –∑–∞–Ω–æ–≤–æ:`
                            );

                        } else {

                            if (PricelistLink.vendor === null) {
                                return bot.sendMessage(
                                    chatId, 
                                    `–ë—Ä–µ–Ω–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω‚ùå\n–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞.`
                                );
                            } else if (user.brand === 'RASCH') {
                                return bot.sendMessage(
                                    chatId,
                                    `–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂–∏ –±—Ä–µ–Ω–¥–∞ Rasch –Ω—É–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å —É –Æ–ª–∏–∏ –°–∫—Ä–∏–±–Ω–∏–∫!`
                                )
                            } else {
                                await bot.sendMessage(
                                    chatId,
                                    `<b>–ë—Ä–µ–Ω–¥ –Ω–∞–π–¥–µ–Ω</b>‚úÖ\n–í–ê–ñ–ù–û: <u>–£—Ç–æ—á–Ω—è–π—Ç–µ –Ω–∞–ª–∏—á–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞.\n–ë–µ–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ –≤ –Ω–∞–ª–∏—á–∏–∏, –ø—Ä–æ–¥–∞–∂–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–∞! –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂–∏ —É—Ç–æ—á–Ω–∏—Ç—å —É –Æ–ª–∏–∏ –°–∫—Ä–∏–±–Ω–∏–∫!</u>\n\n${PricelistLink.messagePrice}`,
                                    { parse_mode: 'HTML' }
                                )
                                return startCheckVendor(chatId, msg);
                            }
                        }

                } else if (
                    user.lastCommand === '/enterVC' &&
                    !ignoreCommands.includes(text)
                    ) {

                    if (isNaN(user.vendorCode)) {
                        await user.update({vendorCode: text.toUpperCase()});
                    } else {
                        await user.update({vendorCode: text});
                    }
                    await bot.sendMessage(chatId, '–ò–¥—ë—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ . . .');
                    const formatedUserVendor = user.vendor.replace(/[\s-]/g, '');
                    botMsgIdx = msg.message_id += 1; 

                    if (formatedUserVendor === '–û–ü–£–°') {

                        if (user.vendorCode.length < 4) {

                            if (botMsgIdx !== null) {
                                bot.deleteMessage(chatId, botMsgIdx);
                                botMsgIdx = null;
                            }
                            return bot.sendMessage(
                                chatId,
                                `–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∏—Å–∫–æ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–æ—Ä–æ—á–µ 4—Ö —Å–∏–º–≤–æ–ª–æ–≤\n–≤–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –∑–∞–Ω–æ–≤–æ:`
                            );
                        } else {
                            return startFindOpus(chatId);
                        }

                    } else if (formatedUserVendor === 'DESIGNERSGUILD') {

                        if (user.vendorCode.length < 4) {

                            if (botMsgIdx !== null) {
                                bot.deleteMessage(chatId, botMsgIdx);
                                botMsgIdx = null;
                            }
                            return bot.sendMessage(
                                chatId,
                                `–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∏—Å–∫–æ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–æ—Ä–æ—á–µ 4—Ö —Å–∏–º–≤–æ–ª–æ–≤\n–≤–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –∑–∞–Ω–æ–≤–æ:`
                            );
                        } else {
                            return startFindDesignersGuild(chatId, msg);
                        }

                    } else if (formatedUserVendor === '–î–ï–ö–û–†–¢–†–ï–ô–î') {

                        if (user.vendorCode.length < 4) {

                            if (botMsgIdx !== null) {
                                bot.deleteMessage(chatId, botMsgIdx);
                                botMsgIdx = null;
                            }
                            return bot.sendMessage(
                                chatId,
                                `–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∏—Å–∫–æ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–æ—Ä–æ—á–µ 4—Ö —Å–∏–º–≤–æ–ª–æ–≤\n–≤–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –∑–∞–Ω–æ–≤–æ:`
                            );
                        } else {
                            return startFindDecaro(chatId, msg);
                        }

                    } else if (formatedUserVendor === '–õ–ï–í–ê–ù–¢–ò–ù') {

                        if (user.vendorCode.length < 4) {

                            if (botMsgIdx !== null) {
                                bot.deleteMessage(chatId, botMsgIdx);
                                botMsgIdx = null;
                            }
                            return bot.sendMessage(
                                chatId,
                                `–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∏—Å–∫–æ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–æ—Ä–æ—á–µ 4—Ö —Å–∏–º–≤–æ–ª–æ–≤\n–≤–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –∑–∞–Ω–æ–≤–æ:`
                            );
                        } else {
                            return startFindLevantin(chatId);
                        }

                    } else if (formatedUserVendor.includes('–î–ï–ö–û–†–î–ï–õ–Æ–ö–°')) {

                        if (user.vendorCode.length < 4) {
                            if (botMsgIdx !== null) {
                                bot.deleteMessage(chatId, botMsgIdx);
                                botMsgIdx = null;
                            }
                            return bot.sendMessage(
                                chatId,
                                `–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∏—Å–∫–æ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–æ—Ä–æ—á–µ 4—Ö —Å–∏–º–≤–æ–ª–æ–≤\n–≤–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –∑–∞–Ω–æ–≤–æ:`
                            );
                        } else {
                            return findDecorDelux(chatId);
                        }

                    } else if (formatedUserVendor.includes('–î–ï–ö–û–†–†–£–°')) {

                        if (user.vendorCode.length < 4) {
                            if (botMsgIdx !== null) {
                                bot.deleteMessage(chatId, botMsgIdx);
                                botMsgIdx = null;
                            }
                            return bot.sendMessage(
                                chatId,
                                `–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∏—Å–∫–æ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–æ—Ä–æ—á–µ 4—Ö —Å–∏–º–≤–æ–ª–æ–≤\n–≤–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –∑–∞–Ω–æ–≤–æ:`
                            );
                        } else {
                            return findDecorRus(chatId);
                        }

                    } else if (formatedUserVendor.includes('–ë–ê–£–¢–ï–ö–°')) {

                        if (user.vendorCode.length < 4) {
                            if (botMsgIdx !== null) {
                                bot.deleteMessage(chatId, botMsgIdx);
                                botMsgIdx = null;
                            }
                            return bot.sendMessage(
                                chatId,
                                `–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∏—Å–∫–æ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–æ—Ä–æ—á–µ 4—Ö —Å–∏–º–≤–æ–ª–æ–≤\n–≤–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –∑–∞–Ω–æ–≤–æ:`
                            );
                        } else {
                            return findBautex(chatId);
                        }

                    } else if (formatedUserVendor.includes('–õ–û–ô–ú–ò–ù–ê')) {

                        if (user.vendorCode.length < 4) {
                            if (botMsgIdx !== null) {
                                bot.deleteMessage(chatId, botMsgIdx);
                                botMsgIdx = null;
                            }
                            return bot.sendMessage(
                                chatId,
                                `–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∏—Å–∫–æ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–æ—Ä–æ—á–µ 4—Ö —Å–∏–º–≤–æ–ª–æ–≤\n–≤–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –∑–∞–Ω–æ–≤–æ:`
                            );
                        } else {
                            return findLoymina(chatId);
                        }

                    } else if (formatedUserVendor.includes('–û–†–ê–ö')) {

                        // lc === '/oracCheck';
                        const user = await UserModel.findOne({
                            where: {
                                chatId: chatId
                            },
                            attributes: ['id', 'chatId', 'lastCommand']
                        });
                    
                        await user.update({lastCommand: '/oracCheck'}, {
                            where: {
                                chatId: chatId
                            }
                        })
                        return findOrac(chatId);

                    } else if (formatedUserVendor.includes('LITTLEGREENE')) {

                        if (user.vendorCode.length < 4) {
                            if (botMsgIdx !== null) {
                                bot.deleteMessage(chatId, botMsgIdx);
                                botMsgIdx = null;
                            }
                            return bot.sendMessage(
                                chatId,
                                `–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∏—Å–∫–æ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–æ—Ä–æ—á–µ 4—Ö —Å–∏–º–≤–æ–ª–æ–≤\n–≤–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –∑–∞–Ω–æ–≤–æ:`
                            );

                        } else {
                            return findLittleGreenePPL(chatId);
                        }
                    } else if (formatedUserVendor.includes('–°–ò–†–ü–ò')) {

                        if (user.vendorCode.length < 4) {
                            if (botMsgIdx !== null) {
                                bot.deleteMessage(chatId, botMsgIdx);
                                botMsgIdx = null;
                            }
                            return bot.sendMessage(
                                chatId,
                                `–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∏—Å–∫–æ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–æ—Ä–æ—á–µ 4—Ö —Å–∏–º–≤–æ–ª–æ–≤\n–≤–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –∑–∞–Ω–æ–≤–æ:`
                            );

                        } else {
                            return findSirpi(chatId);
                        }
                    }

                    if (formatedUserVendor.includes('BRINK&CAMPMAN')) {

                        if (user.vendorCode.length < 4) {
                            if (botMsgIdx !== null) {
                                bot.deleteMessage(chatId, botMsgIdx);
                                botMsgIdx = null;
                            }
                            return bot.sendMessage(
                                chatId,
                                `–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∏—Å–∫–æ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–æ—Ä–æ—á–µ 4—Ö —Å–∏–º–≤–æ–ª–æ–≤\n–≤–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –∑–∞–Ω–æ–≤–æ:`
                            );

                        } else {
                            return findBrink(chatId);
                        }

                    } else {

                        // lc = '/enterNumberofVC';
                        await user.update({lastCommand: '/enterNumberofVC'}, {
                            where: {
                                chatId: chatId
                            }
                        })

                        if (botMsgIdx !== null) {
                            bot.deleteMessage(chatId, botMsgIdx);
                            botMsgIdx = null;
                        }
                        return bot.sendMessage(
                            chatId,
                            `–•–æ—Ä–æ—à–æ!\n<b>–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–µ –≤–∞–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>\n–ë—Ä–µ–Ω–¥: ${user.brand}\n–ê—Ä—Ç–∏–∫—É–ª: ${user.vendorCode}\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:\n<i>–∞ —Ç–∞–∫ –∂–µ –≤–≤–µ–¥–∏—Ç–µ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª</i>`,
                            { parse_mode: 'HTML' }
                        );
                    }

                } else if (
                    user.lastCommand === '/request1C' &&
                    !ignoreCommands.includes(text)
                ) {

                    if (isNaN(text)) {
                        await user.update({vendorCode: text.toUpperCase()});
                    } else {
                        await user.update({vendorCode: text});
                    }
                    await bot.sendMessage(chatId, '–ò–¥—ë—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ . . .');
                    const vendorCode = user.vendorCode;
                    botMsgIdx = msg.message_id += 1; 
                    let findResult1C = await startRequest1C(chatId, vendorCode); 

                    if (findResult1C) {
                    
                        if (botMsgIdx !== null) {
                            bot.deleteMessage(chatId, botMsgIdx);
                            botMsgIdx = null;
                        }

                        return bot.sendMessage(
                            chatId, 
                            `<b><i>–ü–æ–∫–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ —Å–≤–µ—Ä—è–π—Ç–µ –æ—Å—Ç–∞—Ç–∫–∏ —Å –±–∞–∑–æ–π 1–°, –∏–Ω–æ–≥–¥–∞ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –Ω–µ—Ç–æ—á–Ω–æ—Å—Ç–∏</i></b>\n\n${findResult1C.messageResult1C}\n<b><i>–ü–æ–∫–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ —Å–≤–µ—Ä—è–π—Ç–µ –æ—Å—Ç–∞—Ç–∫–∏ —Å –±–∞–∑–æ–π 1–°, –∏–Ω–æ–≥–¥–∞ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –Ω–µ—Ç–æ—á–Ω–æ—Å—Ç–∏</i></b>`,
                            { parse_mode: 'HTML' }
                        );

                    } else {

                        if (botMsgIdx !== null) {
                            bot.deleteMessage(chatId, botMsgIdx);
                            botMsgIdx = null;
                        }

                        return bot.sendMessage(
                            chatId, 
                            `–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ 1–° –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ\n<i>—ç—Ç–æ –Ω–æ—Ä–º–∞ –≤–æ –≤–Ω–µ—Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è –º–∞–≥–∞–∑–∏–Ω–æ–≤</i>`,
                            { parse_mode: 'HTML' }
                        );

                    }

                } else if (
                    user.lastCommand === '/enterReserveNumber' &&
                    !ignoreCommands.includes(text)
                    ) {

                    let counter = 0;
                    while (text.includes("  ") && counter < 3) {
                        text = text.replace(/\s\s/g, ' ');
                        counter++;
                    }
                    await user.update({reserveNumber: text});

                    if ((user.reserveNumber) !== (user.reserveNumber.split(" ")[0])) {
                        return bot.sendMessage(
                            chatId, 
                            `–í—ã –∂–µ–ª–∞–µ—Ç–µ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä—Ç–∏—é <b>${user.reserveNumber.split(" ")[0]}</b> –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ <b>${user.reserveNumber.split(" ")[1]}</b> –µ–¥.–∏–∑–º?\n\n<i>–µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –Ω–∞–∂–º–∏—Ç–µ "<b>C–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å</b>"\n–¥–ª—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏ –≤–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ–≤—Ç–æ—Ä–Ω–æ</i>`, 
                            enterReserveNumberOptions
                        );
                    } else {
                        return bot.sendMessage(
                            chatId, 
                            `–í—ã –∂–µ–ª–∞–µ—Ç–µ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞—Ç—å  <b>${user.vendorCode}</b> –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ <b>${user.reserveNumber}</b> –µ–¥.–∏–∑–º?\n\n<i>–µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –Ω–∞–∂–º–∏—Ç–µ "<b>C–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å</b>"\n–¥–ª—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏ –≤–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ–≤—Ç–æ—Ä–Ω–æ</i>`, 
                            enterReserveNumberOptions
                        );
                    }

                } else if (
                    user.lastCommand === '/enterNumberofVC' &&
                    !ignoreCommands.includes(text)
                    ) {

                    // lc = null;
                    await user.update({lastCommand: null}, {
                        where: {
                            chatId: chatId
                        }
                    })
                    await user.update({reserveNumber: text});
                    return bot.sendMessage(
                        chatId, 
                        `–û—Ç–ª–∏—á–Ω–æ!\n<b>–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–µ –≤–∞–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>\n–ë—Ä–µ–Ω–¥: ${user.brand}\n–ê—Ä—Ç–∏–∫—É–ª: ${user.vendorCode}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${user.reserveNumber}\n\n–•–æ—Ä–æ—à–æ, —Ç–µ–ø–µ—Ä—å —è –º–æ–≥—É –∑–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –∏ —Å—Ä–æ–∫ –ø–æ—Å—Ç–∞–≤–∫–∏.\n–ù—É–∂–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∑–µ—Ä–≤?`, 
                        startFind2Options
                    );

                } else if (
                    user.lastCommand === '/catalog–°heck' &&
                    !ignoreCommands.includes(text)
                    ) {

                    await user.update({catalog: text});

                    await bot.sendMessage(chatId, '–ò–¥—ë—Ç –ø–æ–∏—Å–∫ –∫–∞—Ç–∞–ª–æ–≥–∞ . . .');
                    botMsgIdx = msg.message_id += 1; 

                    const [Textile, Wallpaper] = await Promise.all([findCatalogTextile(chatId), findCatalogWallpaper(chatId)]);

                    if (Textile === null && Wallpaper === null) {

                        if (botMsgIdx !== null) {
                            bot.deleteMessage(chatId, botMsgIdx);
                            botMsgIdx = null;
                        }
                            return bot.sendMessage(
                            chatId, 
                            `–¢–∞–∫–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞ —É –Ω–∞—Å –Ω–µ—Ç\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –Æ–ª–∏–∏ –°–∫—Ä–∏–±–Ω–∏–∫ –∑–∞ —É—Ç–æ—á–Ω–µ–Ω–∏–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞ –¥–∞–Ω–Ω–æ–≥–æ –∞—Ä—Ç–∏–∫—É–ª–∞.\nskribnik@manders.ru\n<code>+7 966 321-80-08</code>\n\n`, 
                            {parse_mode: 'HTML'}
                        );
                    }
                    return {Textile, Wallpaper};

                } else if (
                    user.lastCommand === '/oracCheck' &&
                    !ignoreCommands.includes(text)
                    ) {

                    await user.update({
                        vendorCode: text.toUpperCase()
                    });
                    await bot.sendMessage(
                        chatId, 
                        `–ò–¥—ë—Ç –ø–æ–∏—Å–∫ ${text} . . .`
                    );
                    botMsgIdx = msg.message_id += 1;

                    return findOrac(chatId);

                } else if (
                    user.lastCommand === '/UWCheck' &&
                    !ignoreCommands.includes(text)
                    ) {

                    await user.update({
                        vendorCode: text.toUpperCase()
                    });

                    await bot.sendMessage(
                        chatId, 
                        `–ò–¥—ë—Ç –ø–æ–∏—Å–∫ ${text} . . .`
                    );

                    botMsgIdx = msg.message_id += 1; 

                    return findUW(chatId);

                } else if (text === '/infowork') {

                    return bot.sendMessage(
                        chatId, 
                        `${user.nickname} –≤–æ—Ç, —á—Ç–æ –≤—ã –∏—Å–∫–∞–ª–∏:\n\n–ö–∞—Ç–∞–ª–æ–≥: ${user.catalog}\n–ë—Ä–µ–Ω–¥: ${user.brand}\n–ê—Ä—Ç–∏–∫—É–ª: ${user.vendorCode}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${user.reserveNumber}\n\n–í–∞—à email: ${user.email}`,
                        resetInfoWorkOptions
                    );

                } else if (text === '/infogame') {

                    // lc = null;
                    await user.update({lastCommand: null}, {
                        where: {
                            chatId: chatId
                        }
                    })

                    return bot.sendMessage(
                        chatId, 
                        `–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: "${user.right}"\n–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: "${user.wrong}"`, resetOptions
                    );

                } else if (text.toLowerCase().includes('–ø—Ä–∏–≤–µ—Ç')) {

                    return bot.sendSticker(
                        chatId, 
                        'https://cdn.tlgrm.app/stickers/087/0cf/0870cf0d-ec03-41e5-b239-0eb164dca72e/192/1.webp'
                    );

                } else if ( 
                    text !== '/game' && 
                    text !== '/start' && 
                    text !== '/settings' && 
                    text !== '/files' && 
                    text !== '/x' &&
                    text !== '/abilitys' &&
                    text !== '/updatelist' &&
                    !text.startsWith('/get') &&
                    !text.startsWith('/whois')  
                ) {
                            
                    return bot.sendMessage(
                        chatId,
                        `–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: <b>/mainmenu</b>\n–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>"–ó–∞–ø—Ä–æ—Å: –æ—Å—Ç–∞—Ç–∫–∏+—Å—Ä–æ–∫–∏+—Ä–µ–∑–µ—Ä–≤"</b>.`,
                        { parse_mode: 'HTML' }
                    );
                }

            } else {

                await createNewUser(chatId, msg);

                return chekPassword(chatId, msg);
            }
        } catch (e) {
            console.log('–û—à–∏–±–∫–∞ –≤ —Å–ª—É—à–∞—Ç–µ–ª–µ —Å–æ–æ–±—â–µ–Ω–∏–π.', e)
        }
    }); 

    //—Å–ª—É—à–∞—Ç–µ–ª—å –∫–æ–ª–±—ç–∫–æ–≤==========================================================================================================================================

    bot.on('callback_query', async msg => {
        const data = msg.data;
        const chatId = msg.message.chat.id;

        console.log(msg);

        //—Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã
        const startGame = async (chatId) => {
            const randomNumber = Math.floor(Math.random() * 10)
            chats[chatId] = randomNumber;
            return bot.sendMessage(
                chatId, 
                `–û—Ç–≥–∞–¥—ã–≤–∞–π:`, 
                gameOptions
            );
        }

        const user = await UserModel.findOne({
            where: {
                chatId: chatId
            }
        });

        try {

            if (data === '/mainmenu') {

                if (user.lastCommand === '/game' || user.lastCommand === '/again' || user.lastCommand === '/reset') {
                    await bot.deleteMessage(
                        chatId, 
                        msg.message.message_id
                    );
                }
                // lc = null;
                await user.update({
                    lastCommand: data
                }, {
                    where: {
                        chatId: chatId
                    }
                });

                return bot.sendMessage(
                    chatId, 
                    `–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é, ${user.nickname}\n–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π id: <code>${chatId}</code>`,
                    mainMenuOptions
                ); 

            } else if (data === '/beginwork') {

                if (!user.email) {
                    await editEmail(chatId);
                } else {
                    await bot.sendMessage(
                        chatId, 
                        '–î–ª—è –Ω–∞—á–∞–ª–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º –∏ —Å—Ä–æ–∫–∞–º –µ—Å—Ç—å –¥–≤–∞ –ø—É—Ç–∏:\n\n<b>–ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–∞–ª–æ–≥—É:</b> - –¥–ª—è —Ç–µ—Ö —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ –≤—ã –Ω–µ –∑–Ω–∞–µ—Ç–µ –∏–∑ –∫–∞–∫–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞ –∏—Å–∫–æ–º—ã–π –≤–∞–º–∏ –∞—Ä—Ç–∏–∫—É–ª –∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–∫—É–ø–∫–∏ –¥–∞–Ω–Ω–æ–≥–æ –∞—Ä—Ç–∏–∫—É–ª–∞ —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞.\n\n<b>–ü–æ–∏—Å–∫ –ø–æ –±—Ä–µ–Ω–¥—É:</b> - –¥–ª—è —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ –≤—ã —É–≤–µ—Ä–µ–Ω–Ω—ã, —á—Ç–æ –∏—Å–∫–æ–º—ã–π –≤–∞–º–∏ –∞—Ä—Ç–∏–∫—É–ª –≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–∫–∞–∑–∞—Ç—å —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞.', 
                        workOptions
                    );
                } 
                return; 

            } else if (data === '/beginwork1') {

                if (!user.email) {
                    await editEmail(chatId);
                } else {
                    await bot.sendMessage(
                        chatId, 
                        '–ß–µ–º –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?', 
                        work1Options
                    );
                } 
                return; 

            } else if (data === '/editNickname') {

                return editNickname(chatId);

            } else if (data === '/editEmail') {

                return editEmail(chatId);

            } else if (data === '/resetInfoWork') {
                await user.update({
                    catalog: null, 
                    brand: null, 
                    vendorCode: null, 
                    reserveNumber: null
                }, {
                    where: {
                        chatId: chatId,
                    }
                })

                return bot.sendMessage(
                    chatId,
                    `–ò—Å–∫–æ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–±—Ä–æ—à–µ–Ω–Ω—ã.`
                );

            } else if (data.includes('checkVendor')) {

                const cValue = data.split('=')[1];
                
                await findPricelistLink(chatId, cValue);    // –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞

                return startCheckVendor(chatId, msg);

            } else if (data === '/enterBrand') {
                // lc = data;
                await user.update({lastCommand: data}, {
                    where: {
                        chatId: chatId
                    }
                })

                return bot.sendMessage(
                    chatId, `–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤–≤–µ–¥–∏—Ç–µ –±—Ä–µ–Ω–¥, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –º—ã –±—É–¥–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å –ø–æ–∏—Å–∫:`, 
                    { parse_mode: 'HTML' }
                );

            } else if (data === '/enterReserveNumber') {
                // lc = data;
                await user.update({lastCommand: data}, {
                    where: {
                        chatId: chatId
                    }
                })

                return bot.sendMessage(
                    chatId, `–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–∞—Ä—Ç–∏–∏ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –∂–µ–ª–∞–µ—Ç–µ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞—Ç—å:<i>–Ω–∞–ø—Ä–∏–º–µ—Ä: <b>268–ê 3</b>\n–µ—Å–ª–∏ –ø–∞—Ä—Ç–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Ç–æ –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ</i>`,
                    { parse_mode: "HTML" }
                );

            } else if (data === '/preSendEmail') {

                // lc = data;
                await user.update({lastCommand: data}, {
                    where: {
                        chatId: chatId
                    }
                })

                if ((user.reserveNumber) !== (user.reserveNumber.split(" ")[0])) {

                    const subject = `–†–µ–∑–µ—Ä–≤ ${user.vendorCode}, –ø–∞—Ä—Ç–∏—è: ${user.reserveNumber.split(" ")[0]}, ${user.reserveNumber.split(" ")[1]} –µ–¥.–∏–∑–º, –ø–æ –∑–∞–ø—Ä–æ—Å—É ${chatId}`;
                    const textMail = `\n–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n–ü—Ä–æ—Å—å–±–∞ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –≤ —Ä–µ–∑–µ—Ä–≤ —Å–ª–µ–¥—É—é—â—É—é –ø–æ–∑–∏—Ü–∏—é:\n–∞—Ä—Ç–∏–∫—É–ª: ${user.vendorCode}, –±—Ä–µ–Ω–¥: ${user.brand}, –ø–∞—Ä—Ç–∏—è: ${user.reserveNumber.split(" ")[0]} –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ: ${user.reserveNumber.split(" ")[1]} –µ–¥.–∏–∑–º\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–∏—à–ª–∏—Ç–µ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –æ—Ç–≤–µ—Ç–Ω—ã–º –ø–∏—Å—å–º–æ–º –Ω–∞ purchasing@manders.ru.`;
                
                    await user.update({subject: subject, textMail: textMail}, {
                        where: {
                            chatId: chatId
                        }
                    })

                } else {

                    const subject = `–†–µ–∑–µ—Ä–≤ ${user.vendorCode}, ${user.reserveNumber} –µ–¥.–∏–∑–º, –ø–æ –∑–∞–ø—Ä–æ—Å—É ${chatId}`;
                    const textMail = `\n–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n–ü—Ä–æ—Å—å–±–∞ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –≤ —Ä–µ–∑–µ—Ä–≤ —Å–ª–µ–¥—É—é—â—É—é –ø–æ–∑–∏—Ü–∏—é:\n–∞—Ä—Ç–∏–∫—É–ª: ${user.vendorCode}, –±—Ä–µ–Ω–¥: ${user.brand}, –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ: ${user.reserveNumber} –µ–¥.–∏–∑–º\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–∏—à–ª–∏—Ç–µ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –æ—Ç–≤–µ—Ç–Ω—ã–º –ø–∏—Å—å–º–æ–º –Ω–∞ purchasing@manders.ru.`;

                    await user.update({subject: subject, textMail: textMail}, {
                        where: {
                            chatId: chatId
                        }
                    })
                }

                return bot.sendMessage(
                    chatId, 
                    `–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω email:\n–¢–µ–º–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: <strong>${user.subject}</strong>\n–ö–æ–º—É: <b>–ø–æ—Å—Ç–∞–≤—â–∏–∫—É ${user.brand}</b>\n–ö–æ–ø–∏—è: <b>purchasing_internal@manders.ru</b>\n–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:\n${user.textMail}\n`, 
                    sendReserveOptions
                );

            } else if (data === '/preSendEmailReserveYes') {

                const subject = `–ù–∞–ª–∏—á–∏–µ+—Å—Ä–æ–∫–∏+—Ä–µ–∑–µ—Ä–≤ ${user.vendorCode},  ${user.reserveNumber}, –ø–æ –∑–∞–ø—Ä–æ—Å—É ${chatId}`;
                const textMail = `\n–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n–£—Ç–æ—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ª–∏—á–∏–µ –∏ —Å—Ä–æ–∫ –ø–æ—Å—Ç–∞–≤–∫–∏:\n–∞—Ä—Ç–∏–∫—É–ª: ${user.vendorCode}, –±—Ä–µ–Ω–¥: ${user.brand}, –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ: ${user.reserveNumber}.\n–ü—Ä–æ—Å—å–±–∞ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –≤ —Ä–µ–∑–µ—Ä–≤.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–∏—à–ª–∏—Ç–µ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –æ—Ç–≤–µ—Ç–Ω—ã–º –ø–∏—Å—å–º–æ–º –Ω–∞ purchasing@manders.ru.`;

                await user.update({subject: subject, textMail: textMail}, {
                    where: {
                        chatId: chatId
                    }
                })
            
                const user = await UserModel.findOne({
                    where: {
                        chatId: chatId
                    },
                    attributes: ['id', 'chatId', 'brand', 'subject', 'textMail']
                });

                return bot.sendMessage(
                    chatId, 
                    `–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω email:\n–¢–µ–º–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: <strong>${user.subject}</strong>\n–ö–æ–º—É: <b>–ø–æ—Å—Ç–∞–≤—â–∏–∫—É ${user.brand}</b>\n–ö–æ–ø–∏—è: <b>purchasing_internal@manders.ru</b>\n–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:\n${user.textMail}\n`,
                    sendReserveOptions
                );

            } else if (data === '/preSendEmailReserveNo') {

                const subject = `–ù–∞–ª–∏—á–∏–µ+—Å—Ä–æ–∫–∏ ${user.vendorCode},  ${user.reserveNumber}, –ø–æ –∑–∞–ø—Ä–æ—Å—É ${chatId}`;
                const textMail = `\n–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n–£—Ç–æ—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ª–∏—á–∏–µ –∏ —Å—Ä–æ–∫ –ø–æ—Å—Ç–∞–≤–∫–∏:\n–∞—Ä—Ç–∏–∫—É–ª: ${user.vendorCode}, –±—Ä–µ–Ω–¥: ${user.brand}, –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ: ${user.reserveNumber}.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–∏—à–ª–∏—Ç–µ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –æ—Ç–≤–µ—Ç–Ω—ã–º –ø–∏—Å—å–º–æ–º –Ω–∞ purchasing@manders.ru.`;

                await user.update({subject: subject, textMail: textMail}, {
                    where: {
                        chatId: chatId
                    }
                })
            
                const user = await UserModel.findOne({
                    where: {
                        chatId: chatId
                    },
                    attributes: ['id', 'chatId', 'brand', 'subject', 'textMail']
                });

                return bot.sendMessage(
                    chatId, 
                    `–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω email:\n–¢–µ–º–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: <strong>${user.subject}</strong>\n–ö–æ–º—É: <b>–ø–æ—Å—Ç–∞–≤—â–∏–∫—É ${user.brand}</b>\n–ö–æ–ø–∏—è: <b>purchasing_internal@manders.ru</b>\n–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:\n${user.textMail}\n`, 
                    sendReserveOptions
                );

            } else if (data === '/sendReserveEmail') {
                // lc = data;
                await user.update({lastCommand: data}, {
                    where: {
                        chatId: chatId
                    }
                })

                return sendReserveEmail(chatId);

            } else if (data === '/catalog–°heck') {
                // lc = data;
                await user.update({lastCommand: data}, {
                    where: {
                        chatId: chatId
                    }
                })

                return bot.sendMessage(
                    chatId, 
                    '–í–≤–µ–¥–∏—Ç–µ <b>–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞</b> —Å–æ–¥–µ—Ä–∂–∞—â–µ–≥–æ –∏—Å–∫–æ–º—ã–π –≤–∞–º–∏ —Ç–æ–≤–∞—Ä:\n<i>(–ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞, –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞)</i>', 
                    { parse_mode: 'HTML' }
                );

            } else if (data === '/oracCheck') {
                // lc = data;
                await user.update({lastCommand: data}, {
                    where: {
                        chatId: chatId
                    }
                })

                return bot.sendMessage(
                    chatId, 
                    '–í–≤–µ–¥–∏—Ç–µ –∏—Å–∫–æ–º—ã–π –≤–∞–º–∏ <b>–∞—Ä—Ç–∏–∫—É–ª</b> —Ç–æ–≤–∞—Ä–∞ ORAC :\n<i>(–ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞, –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–π –∞—Ä—Ç–∏–∫—É–ª –¥–ª—è –ø–æ–∏—Å–∫–∞)</i>', 
                    { parse_mode: 'HTML' }
                );

            } else if (data.includes('UWCheck')) {

                if ( data === '/UWCheck' ) {

                    await user.update({lastCommand: data}, {
                        where: {
                            chatId: chatId
                        }
                    });
    
                    return bot.sendMessage(
                        chatId, 
                        '–í–≤–µ–¥–∏—Ç–µ –∏—Å–∫–æ–º—ã–π –≤–∞–º–∏ <b>–∞—Ä—Ç–∏–∫—É–ª</b> —Ç–æ–≤–∞—Ä–∞ <b>ULTRA WOOD</b> :\n<i>(–ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞, –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–π –∞—Ä—Ç–∏–∫—É–ª –¥–ª—è –ø–æ–∏—Å–∫–∞)</i>', 
                        { parse_mode: 'HTML' }
                    );

                }

            } else if (data === '/request1C') {
                // lc = '/request1C';
                await user.update({lastCommand: data}, {
                    where: {
                        chatId: chatId
                    }
                })

                return bot.sendMessage(
                    chatId, 
                    '–í–≤–µ–¥–∏—Ç–µ –∏—Å–∫–æ–º—ã–π –≤–∞–º–∏ <b>–∞—Ä—Ç–∏–∫—É–ª</b>:\n<i>(–ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞, –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–π –∞—Ä—Ç–∏–∫—É–ª –¥–ª—è –ø–æ–∏—Å–∫–∞)</i>', 
                    { parse_mode: 'HTML' }
                );

            } else if (data === '/work2') {
                // lc = null;
                await user.update({lastCommand: null}, {
                    where: {
                        chatId: chatId
                    }
                })

                return bot.sendMessage(
                    chatId, 
                    sorry, 
                    mainMenuReturnOptions
                );

            } else if (data === '/work3') {
                // lc = null;
                await user.update({lastCommand: null}, {
                    where: {
                        chatId: chatId
                    }
                })

                return bot.sendMessage(
                    chatId, 
                    sorry, 
                    mainMenuReturnOptions
                );

            } else if (data === '/again') {
                // lc = data;
                await user.update({lastCommand: data}, {
                    where: {
                        chatId: chatId
                    }
                })

                await bot.deleteMessage(
                    chatId, 
                    msg.message.message_id
                );
                return startGame(chatId);

            } else if (data === '/infogame') {
                // lc = data;
                await user.update({lastCommand: data}, {
                    where: {
                        chatId: chatId
                    }
                })

                await bot.deleteMessage(
                    chatId, 
                    msg.message.message_id
                );
                return bot.sendMessage(
                    chatId, 
                    `–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: "${user.right}"\n–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: "${user.wrong}"`, 
                    resetOptions
                ); 

            } else if(data === '/reset') {
                // lc = data;
                await user.update({lastCommand: data}, {
                    where: {
                        chatId: chatId
                    }
                })

                await bot.deleteMessage(
                    chatId, 
                    msg.message.message_id
                );
                if (user) {
                    await user.update ({
                        right: 0,
                        wrong: 0,
                    });
                }

                return bot.sendMessage(
                    chatId, 
                    `–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–≥—Ä—ã —Å–±—Ä–æ—à–µ–Ω–Ω—ã:\n–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö ${user.right},\n–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö ${user.wrong}`, 
                    againOptions
                );

            } else if (user.lastCommand === '/game' || user.lastCommand === '/again') {

                if (data == chats[chatId]) {
                    user.right += 1;
                    await user.save(chatId);
                    await bot.deleteMessage(
                        chatId, 
                        msg.message.message_id
                    );
                    return bot.sendMessage(
                        chatId, 
                        `–¢—ã –æ—Ç–≥–∞–¥–∞–ª —Ü–∏—Ñ—Ä—É "${chats[chatId]}"`, 
                        againOptions
                    );
                } else {
                    user.wrong += 1;
                    await user.save();
                    await bot.deleteMessage(
                        chatId, 
                        msg.message.message_id
                    );
                    return bot.sendMessage(
                        chatId, 
                        `–ù–µ—Ç, —è –∑–∞–≥–∞–¥–∞–ª —Ü–∏—Ñ—Ä—É "${chats[chatId]}"`, 
                        againOptions
                    );  
                }
            }

        } catch (err) {    
            console.log(err);  
            return bot.sendMessage(
                chatId, 
                '–û—à–∏–±–∫–∞ –≤ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–¥–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞—Ç–µ–ª—è –∫–æ–ª–±—ç–∫–æ–≤',
            );
        }

    });

}

// ======================================================================================================================================
// –∫–æ–Ω–µ—Ü –±–ª–æ–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π ====================================================================================================================
// ======================================================================================================================================
// –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ =====================================================================================================================
// ======================================================================================================================================

function readConfigSync() {
    const data = fs.readFileSync('/root/zak/config.cfg', 'utf-8');
    // const data = fs.readFileSync('C:\\node.js\\zak\\config.cfg', 'utf-8');
    const lines = data.split('\n');
    const config = {};
  
    lines.forEach(line => {
        const [key, value] = line.trim().split('=');
        config[key] = value;
    });
  
    return config;
}
// –ø—Ä–æ—á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ config.cfg
const config = readConfigSync();

const bot_password = config.bot_password;
const url_manders_1C = config.url_manders_1C;
const levantin_login = config.levantin_login;
const levantin_password = config.levantin_password;
const ProxyAgent = config.ProxyAgent;
const loginDG = config.loginDG;
const passwordDG = config.passwordDG;

const agent = new SocksProxyAgent(ProxyAgent);

const bot = new TelegramApi(config.bot_token, {
    polling: {
        interval: 1000, //–º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ —Å –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä —Ç–≥ "–º–ª—Å–µ–∫"
        autoStart: true, //–æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–æ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã
        params: {
            timeout:10 //—Ç–∞–π–º–∞—É—Ç –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ "–º–ª—Å–µ–∫"
        }
    }
});

//–ú–ï–ù–Æ –ö–û–ú–ê–ù–î
bot.setMyCommands([
    {command: '/mainmenu', description:'–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'},
    {command: '/abilitys', description:'–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞'},
    {command: '/updatelist', description:'–°–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π'},
    {command: '/settings', description:'–ù–∞—Å—Ç—Ä–æ–π–∫–∏'},
]);
const ignoreCommands =  '/mainmenu/mymovements/abilitys/updatelist/settings';

start();